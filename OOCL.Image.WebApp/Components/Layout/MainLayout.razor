@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject OOCL.Image.Shared.WebAppConfig Config
@inject NavigationManager NavigationManager
@inject ApiClient Api
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components.Routing

<div class="main-layout" style="display:flex;min-height:100vh;">
    <nav class="app-nav" style="background:var(--nav-bg);color:var(--nav-fg);width:@(navOpen? "210px":"60px");transition:width .18s ease;overflow:hidden;box-shadow:0 0 4px var(--shadow-color);display:flex;flex-direction:column;">
        <div style="display:flex;align-items:center;gap:.5rem;padding:.55rem .65rem .4rem .65rem;">
            <RadzenButton Size="ButtonSize.Small"
                          Icon="@(navOpen ? "close" : "menu")"
                          ButtonStyle="ButtonStyle.Secondary"
                          Class="nav-toggle-modern"
                          Click="@ToggleNav" />
            @if (navOpen)
            {
                <span style="font-weight:600;font-size:.9rem;">Navigation</span>
            }
        </div>
        <div style="flex:1 1 auto;display:flex;flex-direction:column;padding:.35rem;gap:.25rem;">
            <NavLink href="/" Match="NavLinkMatch.All" class="nav-entry">
                <div class="nav-link-inner @(IsActive("/") ? "active" : null)">
                    <span class="icon">🏠</span>
                    @if (navOpen) { <span>Home</span> }
                </div>
            </NavLink>
            <NavLink href="/explorer" class="nav-entry">
                <div class="nav-link-inner @(IsActive("/explorer") ? "active" : null)">
                    <span class="icon">🛰️</span>
                    @if (navOpen) { <span>Explorer</span> }
                </div>
            </NavLink>
            <!-- Neu: Audio Tab -->
            <NavLink href="/audio" class="nav-entry">
                <div class="nav-link-inner @(IsActive("/audio") ? "active" : null)">
                    <span class="icon">🎵</span>
                    @if (navOpen) { <span>Audio</span> }
                </div>
            </NavLink>
            <!-- Neu: CUDA Tab -->
            <NavLink href="/cuda" class="nav-entry">
                <div class="nav-link-inner @(IsActive("/cuda") ? "active" : null)">
                    <span class="icon">🧪</span>
                    @if (navOpen)
                    {
                        <span>CUDA</span>
                    }
                </div>
            </NavLink>
            <!-- Neu: YTDLP -->
            <NavLink href="/ytdlp" class="nav-entry">
                <div class="nav-link-inner @(IsActive("/ytdlp") ? "active" : null)">
                    <span class="icon">📼</span>
                    @if (navOpen)
                    {
                        <span>YTDLP</span>
                    }
                </div>
            </NavLink>
        </div>
        <div style="padding:.5rem .7rem;font-size:.65rem;opacity:.55;">@DateTime.Now:HH:mm</div>
    </nav>

    <div style="flex:1 1 auto;display:flex;flex-direction:column;min-width:0;background:var(--content-bg);color:var(--content-fg);position:relative;">
        <header class="topbar" style="display:flex;justify-content:center;align-items:center;gap:1rem;padding:.55rem 1rem;background:var(--topbar-bg);color:var(--topbar-fg);box-shadow:0 1px 4px var(--shadow-color);">
            <div style="display:flex;align-items:flex-start;gap:1rem;">
                <div class="brand" style="font-weight:700;font-size:1rem;">OOCL.Image</div>
                <div style="display:flex;align-items:center;gap:.4rem;">
                    <RadzenButton Size="ButtonSize.Small"
                                  Icon="@(isDark ? "light_mode" : "dark_mode")"
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Class="theme-toggle-modern"
                                  Click="@ToggleTheme"
                                  Text="@toggleText" />
                    <RadzenButton Size="ButtonSize.Small"
                                  Icon="@(footerOpen ? "unfold_more" : "unfold_less")"
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Click="@ToggleFooter"
                                  Text="Logs" />
                </div>
            </div>
        </header>

        <CascadingValue Value="cachedOpenClServiceInfo">
            <CascadingValue Value="cachedKernelInfos">
                <main style="flex:1 1 auto;min-width:0;position:relative;">
                    @if (isMetaLoading && (cachedKernelInfos == null || cachedKernelInfos.Count == 0))
                    {
                        <div style="padding:.75rem;font-size:.8rem;opacity:.8;">Loading OpenCL meta...</div>
                    }
                    @Body
                </main>
            </CascadingValue>
        </CascadingValue>

        <!-- Overlay Footer (über Inhalt, nicht pushend) -->
        <div class="log-footer"
             style="
                position:fixed;
                left:@(navOpen ? "210px" : "60px");
                right:0;
                bottom:0;
                height:25vh;
                transform:translateY(@(footerOpen ? "0" : "100%"));
                transition:transform .28s ease;
                z-index:3000;
                border-top:1px solid var(--shadow-color);
                background:var(--topbar-bg);
                color:var(--topbar-fg);
                display:flex;
                flex-direction:column;
                box-shadow:0 -4px 10px rgba(0,0,0,.45);
             ">
            <div style="flex:1 1 auto;display:flex;min-height:0;">
                <div style="flex:1 1 50%;display:flex;flex-direction:column;min-width:0;">
                    <div style="font-size:.65rem;padding:.25rem .5rem;opacity:.7;display:flex;justify-content:space-between;align-items:center;">
                        <span>App Logs (@appLogs.Count)</span>
                        <span style="display:flex;gap:.25rem;">
                            <RadzenButton Icon="refresh" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light"
                                          Click="@(async ()=> await RefreshAppLog())"
                                          Style="height:20px;width:20px;padding:0;font-size:.55rem;" />
                            <RadzenButton Icon="close" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light"
                                          Click="@ToggleFooter"
                                          Style="height:20px;width:20px;padding:0;font-size:.55rem;" />
                        </span>
                    </div>
                    <div style="flex:1 1 auto;overflow:auto;">
                        <pre style="margin:0;padding:.4rem;font-size:.6rem;white-space:pre-wrap;">@string.Join("\n", appLogs)</pre>
                    </div>
                </div>
                <div style="flex:1 1 50%;display:flex;flex-direction:column;min-width:0;border-left:1px solid var(--shadow-color);">
                    <div style="font-size:.65rem;padding:.25rem .5rem;opacity:.7;display:flex;justify-content:space-between;align-items:center;">
                        <span>API Logs (@apiLogs.Count)</span>
                        <span style="display:flex;gap:.25rem;">
                            <RadzenButton Icon="refresh" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light"
                                          Click="@(async ()=> await RefreshApiLog())"
                                          Style="height:20px;width:20px;padding:0;font-size:.55rem;" />
                            <RadzenButton Icon="close" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light"
                                          Click="@ToggleFooter"
                                          Style="height:20px;width:20px;padding:0;font-size:.55rem;" />
                        </span>
                    </div>
                    <div style="flex:1 1 auto;overflow:auto;">
                        <pre style="margin:0;padding:.4rem;font-size:.6rem;white-space:pre-wrap;">@string.Join("\n", apiLogs)</pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isDark;
    private bool navOpen = false;
    private bool footerOpen = false;
    private string toggleText => isDark ? "Light" : "Dark";

    // --- Static Cache ---
    private static OpenClServiceInfo? cachedOpenClServiceInfo;
    private static List<OpenClKernelInfo>? cachedKernelInfos;
    private static DateTime lastMetaFetchUtc = DateTime.MinValue;
    private static readonly TimeSpan metaTtl = TimeSpan.FromMinutes(10);

    // Use non-blocking acquire to avoid queuing many requests on server-wide SemaphoreSlim.
    // Previously we used a blocking WaitAsync() which caused other callers to wait and
    // produced the observed ~9s delay on first global load.
    private static readonly SemaphoreSlim metaLock = new(1, 1);

    private static List<string> appLogs = [];
    private static List<string> apiLogs = [];

    private bool isMetaLoading;

    protected override void OnInitialized()
    {
        isDark = Config.DefaultDarkMode ?? false;
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Refresh logs async but don't block navigation handlers
        _ = RefreshLogsAsync();
        StateHasChanged();
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDark = await this.Api.GetBrowserSettingDarkMode(this.JS);
            await JS.InvokeVoidAsync("theme.set", isDark);

            // Fire-and-forget; EnsureMetaAsync now uses a non-blocking lock acquisition
            _ = EnsureMetaAsync();

            // Refresh logs but don't block rendering of the page on the kernel-fetch path.
            _ = RefreshLogsAsync();
        }
    }

    private async Task EnsureMetaAsync(bool force = false)
    {
        // Fast path: fresh cache
        if (!force &&
            cachedKernelInfos != null &&
            cachedKernelInfos.Count > 0 &&
            DateTime.UtcNow - lastMetaFetchUtc < metaTtl)
        {
            return;
        }

        // Try to acquire lock immediately to avoid queuing on the Semaphore.
        // If we can't acquire instantly, someone else is already fetching and we return
        // immediately to avoid blocking other requests.
        var acquired = await metaLock.WaitAsync(TimeSpan.Zero);
        if (!acquired)
        {
            // Another operation is in progress — avoid waiting and return.
            return;
        }

        try
        {
            // Double-check cache after acquiring
            if (!force &&
                cachedKernelInfos != null &&
                cachedKernelInfos.Count > 0 &&
                DateTime.UtcNow - lastMetaFetchUtc < metaTtl)
            {
                return;
            }

            isMetaLoading = true;
            StateHasChanged();

            // Lightweight status fetch
            cachedOpenClServiceInfo = await Api.GetOpenClServiceInfoAsync();

            // If not initialized, try to initialize once. This may be slow on first startup.
            if (cachedOpenClServiceInfo != null && !cachedOpenClServiceInfo.Initialized)
            {
                try
                {
                    await Api.InitializeOpenClIndexAsync(0);
                    cachedOpenClServiceInfo = await Api.GetOpenClServiceInfoAsync();
                }
                catch
                {
                    // ignore init errors here; we still try to fetch kernels (server may still provide none)
                }
            }

            // Fetch kernels (this may be the expensive part on first-run)
            try
            {
                cachedKernelInfos = (await Api.GetOpenClKernelsAsync()).ToList();
            }
            catch
            {
                cachedKernelInfos = new List<OpenClKernelInfo>();
            }

            lastMetaFetchUtc = DateTime.UtcNow;
        }
        finally
        {
            isMetaLoading = false;
            metaLock.Release();
            StateHasChanged();
        }
    }

    private async Task RefreshMeta()
    {
        await EnsureMetaAsync(true);
        await RefreshLogsAsync();
    }

    private async Task ToggleTheme()
    {
        isDark = !isDark;
        Config.DefaultDarkMode = isDark;
        await JS.InvokeVoidAsync("theme.set", isDark);
        _ = RefreshLogsAsync();
        StateHasChanged();
    }

    private async Task RefreshAppLog()
    {
        try
        {
            var logs = await Api.GetWebAppLogs();
            if (logs != null)
            {
                appLogs = logs.ToList();
            }
        }
        catch { }
    }

    private async Task RefreshApiLog()
    {
        try
        {
            var logs = await Api.GetApiLogsAsync();
            if (logs != null)
            {
                apiLogs = logs.ToList();
            }
        }
        catch { }
    }

    private async Task RefreshLogsAsync()
    {
        // run in parallel but don't throw
        await Task.WhenAll(RefreshAppLog(), RefreshApiLog());
    }

    private void ClearLogs()
    {
        appLogs.Clear();
        apiLogs.Clear();
    }

    private void ToggleNav() => navOpen = !navOpen;

    private async Task ToggleFooter()
    {
        footerOpen = !footerOpen;
        if (footerOpen)
        {
            await RefreshLogsAsync();
        }
    }

    private bool IsActive(string href)
    {
        var uri = NavigationManager?.ToBaseRelativePath(NavigationManager.Uri)?.TrimEnd('/');
        if (string.IsNullOrEmpty(uri) && href == "/") return true;
        return href.Trim('/').Equals(uri, StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


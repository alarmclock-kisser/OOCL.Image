@page "/cuda"
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using OOCL.Image.Client
@using OOCL.Image.Shared
@using Radzen.Blazor
@using Radzen
@using Microsoft.JSInterop
@using System.Globalization
@inject ApiClient Api
@inject WebAppConfig Config
@inject NotificationService Notifications
@inject IJSRuntime JS
@inject DialogService DialogService

<PageTitle>OOCL.work: CUDA Worker</PageTitle>

<link rel="stylesheet" href="/css/site.css" />

@if (VM == null)
{
    <RadzenCard Style="max-width:1100px;margin:auto;margin-top:2rem;">
        <h3>api.OOCL.work: CUDA Worker</h3>
        <div>Loading...</div>
    </RadzenCard>
}
else
{
    <RadzenCard Style="max-width:1100px;margin:auto;margin-top:2rem;">
        <h3>CUDA Workers</h3>

        <div style="display:flex;gap:12px;margin-bottom:12px;">
            <div style="flex:1 1 300px;">
                <label style="font-weight:600;display:block;margin-bottom:6px;">Registered CUDA Workers</label>
                <textarea style="width:100%;height:140px;" readonly>@string.Join("\n", VM.RegisteredWorkers)</textarea>
            </div>

            <div style="flex:1 1 300px;">
                <label style="font-weight:600;display:block;margin-bottom:6px;">Register new worker</label>
                <input style="width:100%;padding:.4rem;" placeholder="https://worker.example" @bind="VM.NewWorkerUrl" />
                <!-- Ergänzung unter "Register new worker" und "Refresh" Button -->
                <div style="display:flex;gap:8px;margin-top:8px;align-items:center;">
                    <button class="rz-button rz-primary" @onclick="@(async () => { await VM.RegisterWorkerAsync(); StateHasChanged(); })">Register</button>
                    <button class="rz-button" @onclick="@(async () => { VM.NewWorkerUrl = string.Empty; await VM.RefreshRegisteredWorkersAsync(); StateHasChanged(); })">Refresh</button>
                    <!-- NEU: Numeric für Delay -->
                    <RadzenNumeric TValue="int"
                                   Value="@refreshDelayMs"
                                   Change="@( (int v) => OnRefreshDelayChanged(v) )"
                                   Min="500"
                                   Max="10000"
                                   Step="250"
                                   Style="width:90px;margin-left:12px;" />
                    <span style="margin-left:4px;">ms</span>
                    <!-- NEU: Checkbox für Log-Refresh-Msg -->
                    <RadzenCheckBox @bind-Value="VM.ShowLogRefreshedMsg" Style="margin-left:12px;" />
                    <span style="margin-left:4px;font-size:0.95em;">Log Tick Message</span>
                </div>
                <div style="margin-top:8px;">
                    @if (VM.UseClientApiHttpNoCert == true)
                    {
                        <span style="color:red;font-weight:bold;">Achtung: Client API nutzt unsichere HTTP-Verbindung (kein Zertifikat)!</span>
                    }
                    else if (VM.UseClientApiHttpNoCert == false)
                    {
                        <span style="color:green;font-weight:bold;">Client API Verbindung ist sicher (Zertifikat aktiv).</span>
                    }
                    else
                    {
                        <span style="visibility:hidden;">&nbsp;</span>
                    }
                </div>
                <div style="margin-top:8px;@(VM.RegistrationColor)">@VM.RegistrationMessage</div>
            </div>
        </div>

        <div style="margin-top:6px;">
            <RadzenCard>
                <h4>CuFFT Test</h4>
                <div style="display:flex;gap:12px;align-items:center;flex-wrap:wrap;">
                    <div>
                        <label>FFT Size (32 - 256M)</label>
                        <RadzenNumeric TValue="int"
                                       Value="VM.FftSize"
                                       Change="@( (int v) => OnFftSizeChanged(v) )"
                                       Min="32"
                                       Max="65536"
                                       Step="1"
                                       Style="width:120px;" />
                    </div>

                    <div>
                        <label>Batch Size (1 - 1024)</label>
                        <RadzenNumeric TValue="int" @bind-Value="VM.BatchSize" Min="1" Max="1024" Style="width:120px;" />
                    </div>

                    <div style="margin-top:6px;">
                        <div style="display:flex;align-items:center;gap:6px;">
                            <label>Do inverse afterwards</label>
                            <RadzenCheckBox @bind-Value="VM.DoInverseAfterwards" />
                        </div>

                        <div style="display:flex;align-items:center;gap:6px;">
                            <label>Serialize as base64</label>
                            <RadzenCheckBox @bind-Value="VM.SerializeAsBase64" />
                        </div>

                        <div style="display:flex;align-items:center;gap:6px;">
                            <label>RequestMode-Mode (off = RunMode)</label>
                            <RadzenCheckBox @bind-Value="VM.RequestTestMode" />
                        </div>
                    </div>

                    <div style="margin-top:6px;">
                        <div style="min-width:220px;">
                            <label>Force Device Name</label>
                            <input style="width:100%;padding:.4rem;" @bind="VM.ForceDeviceName" />
                        </div>

                        <div style="min-width:360px;">
                            <label>Preferred Client API Url</label>
                            <div style="display:flex;gap:.5rem;align-items:center;">
                                <input style="flex:1 1 auto;padding:.4rem;" @bind="VM.PreferredClientApiUrl" />

                                @if (!string.IsNullOrWhiteSpace(VM.PreferredClientSwaggerLink))
                                {
                                    var httpSwaggerLink = VM.PreferredClientSwaggerLink.Replace("https://", "http://");
                                    <a href="@httpSwaggerLink"
                                       target="_blank"
                                       rel="noopener noreferrer"
                                       title="@httpSwaggerLink"
                                       style="color:var(--link-color, #0a66c2);text-decoration:underline;margin-left:.25rem;">
                                        Swagger
                                    </a>
                                }
                                else
                                {
                                    <span style="color:gray;margin-left:.25rem;">Swagger</span>
                                }
                            </div>
                        </div>
                        <div style="display:flex;gap:8px;align-items:center;">
                            <button class="rz-button rz-primary" @onclick="@(async () => { await VM.RunCufftTestAsync(); StateHasChanged(); })">Run</button>
                            <div style="margin-left:12px;">ExecutionTime: @VM.ExecutionTimeMs ms</div>
                        </div>
                    </div>
                </div>
                <div style="min-width:360px;">
                    <div style="margin-top:12px;">
                        <label>Result preview</label>
                        <textarea style="width:100%;height:90px;" readonly>@VM.PreviewText</textarea>
                    </div>
                </div>
            </RadzenCard>
        </div>

        <div class="opencl-device-panel themed-panel">
            <!-- Header -->
            <div class="panel-header">
                <b class="panel-title">CUDA WorkerApi Logs: </b>
                <span class="panel-sub">@GetWorkerApiLogInfoString()</span>
                <span class="spacer"></span>
                <!-- NEU: Clear Log Button (rot, links vor +/-) -->
                <RadzenButton ButtonStyle="ButtonStyle.Danger"
                              Size="ButtonSize.Small"
                              Icon="delete"
                              Style="min-width:30px;width:30px;padding:0;margin-right:8px;"
                              Click="@OnClearWorkerApiLog" />
                <RadzenButton ButtonStyle="ButtonStyle.Light"
                              Size="ButtonSize.Small"
                              Icon="@(isWorkerApiLogsExpanded ? "remove" : "add")"
                              Style="min-width:30px;width:30px;padding:0;"
                              Click="@ToggleWorkerApiLogs" />
            </div>

            <!-- Body (only if expanded) -->
            @if (isWorkerApiLogsExpanded)
            {
                <div class="panel-body" style="max-height:300px;overflow:auto;">
                    <textarea id="workerApiLogArea"
                              style="width:100%;height:200px;font-family:monospace;overflow-y:auto;"
                              readonly>@string.Join("\n", VM.WorkerApiLog)</textarea>
                </div>
            }
        </div>
    </RadzenCard>
}

@implements IDisposable

@code
{
    private CudaViewModel VM = null!;
    private System.Threading.Timer? logRefreshTimer;
    private int refreshDelayMs = 3000;
    private bool timerStarted = false;

    protected override async Task OnInitializedAsync()
    {
        VM = new CudaViewModel(Api, null, Config, Notifications, JS, DialogService);
        await VM.InitializeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !timerStarted)
        {
            timerStarted = true;
            logRefreshTimer = new System.Threading.Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await VM.RefreshWorkerApiLog();
                    StateHasChanged();
                    await JS.InvokeVoidAsync("scrollToBottom", "workerApiLogArea");
                });
            }, null, 0, refreshDelayMs);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnFftSizeChanged(int value)
    {
        // VM.ToggleChunkSize expects a numeric value; it snaps to nearest power of two
        await VM.SetFftSize(value);
        StateHasChanged();
    }

    private bool isWorkerApiLogsExpanded = true;

    private async Task ToggleWorkerApiLogs()
    {
        isWorkerApiLogsExpanded = !isWorkerApiLogsExpanded;

        await VM.RefreshWorkerApiLog();
        StateHasChanged();
    }

    private string GetWorkerApiLogInfoString()
    {
        string info = $"Log entries: {VM.WorkerApiLog.Count} (" + (VM.HasWorkerApi ? "Online" : "Offline" ) +")";

        return info;
    }

    private void OnRefreshDelayChanged(int value)
    {
        refreshDelayMs = value;
        logRefreshTimer?.Change(0, refreshDelayMs);
    }

    private void OnClearWorkerApiLog()
    {
        VM.WorkerApiLog.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        logRefreshTimer?.Dispose();
    }
}

<script>
    window.scrollToBottom = function (elementId) {
        var el = document.getElementById(elementId);
        if (el) el.scrollTop = el.scrollHeight;
    }
</script>
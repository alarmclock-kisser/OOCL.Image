@page "/cuda"
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using OOCL.Image.Client
@using OOCL.Image.Shared
@using Radzen.Blazor
@using Radzen
@using Microsoft.JSInterop
@using System.Globalization
@inject ApiClient Api
@inject WebAppConfig Config
@inject NotificationService Notifications
@inject IJSRuntime JS
@inject DialogService DialogService

<PageTitle>OOCL.work: CUDA Worker</PageTitle>

<link rel="stylesheet" href="/css/site.css" />

@if (VM == null)
{
    <RadzenCard Style="max-width:1100px;margin:auto;margin-top:2rem;">
        <h3>api.OOCL.work: CUDA Worker</h3>
        <div>Loading...</div>
    </RadzenCard>
}
else
{
    <RadzenCard Style="max-width:1100px;margin:auto;margin-top:2rem;">
        <h3>CUDA Workers</h3>

        <div style="display:flex;gap:12px;margin-bottom:12px;">
            <div style="flex:1 1 300px;">
                <label style="font-weight:600;display:block;margin-bottom:6px;">Registered CUDA Workers</label>
                <textarea style="width:100%;height:140px;" readonly>@string.Join("\n", VM.RegisteredWorkers)</textarea>
            </div>

            <div style="flex:1 1 300px;">
                <label style="font-weight:600;display:block;margin-bottom:6px;">Register new worker</label>
                <input style="width:100%;padding:.4rem;" placeholder="https://worker.example" @bind="VM.NewWorkerUrl" />
                <div style="display:flex;gap:8px;margin-top:8px;align-items:center;">
                    <button class="rz-button rz-primary" @onclick="@(async () => { await VM.RegisterWorkerAsync(); StateHasChanged(); })">Register</button>
                    <button class="rz-button" @onclick="@(async () => { VM.NewWorkerUrl = string.Empty; await VM.RefreshRegisteredWorkersAsync(); StateHasChanged(); })">Refresh</button>
                </div>
                <div style="margin-top:8px;@(VM.RegistrationColor)">@VM.RegistrationMessage</div>
            </div>
        </div>

        <div style="margin-top:6px;">
            <RadzenCard>
                <h4>CuFFT Test</h4>
                <div style="display:flex;gap:12px;align-items:center;flex-wrap:wrap;">
                    <div>
                        <label>FFT Size (power of two)</label>
                        <RadzenNumeric TValue="int" @bind-Value="VM.FftSize" Change="@( (int v) => { VM.SetFftSize(v); StateHasChanged(); } )" Min="32" Max="65536" Style="width:160px;" />
                    </div>

                    <div>
                        <label>Batch Size</label>
                        <RadzenNumeric TValue="int" @bind-Value="VM.BatchSize" Min="1" Max="1024" Style="width:120px;" />
                    </div>

                    <div style="display:flex;align-items:center;gap:6px;">
                        <label>Do inverse afterwards</label>
                        <RadzenCheckBox @bind-Value="VM.DoInverseAfterwards" />
                    </div>

                    <div style="min-width:220px;">
                        <label>Force Device Name</label>
                        <input style="width:100%;padding:.4rem;" @bind="VM.ForceDeviceName" />
                    </div>

                    <div style="min-width:360px;">
                        <label>Preferred Client API Url</label>
                        <input style="width:100%;padding:.4rem;" @bind="VM.PreferredClientApiUrl" />
                    </div>

                    <div style="display:flex;gap:8px;align-items:center;">
                        <button class="rz-button rz-primary" @onclick="@(async () => { await VM.RunCufftTestAsync(); StateHasChanged(); })">Run</button>
                        <div style="margin-left:12px;">ExecutionTime: @VM.ExecutionTimeMs ms</div>
                    </div>
                </div>

                <div style="margin-top:12px;">
                    <label>Result preview</label>
                    <textarea style="width:100%;height:90px;" readonly>@VM.PreviewText</textarea>
                </div>
            </RadzenCard>
        </div>
    </RadzenCard>
}

@code
{
    private CudaViewModel VM = null!;


    protected override async Task OnInitializedAsync()
    {
        VM = new CudaViewModel(Api, Config, Notifications, JS, DialogService);

        await VM.InitializeAsync();
    }


}
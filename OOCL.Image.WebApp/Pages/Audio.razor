@page "/audio"
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using OOCL.Image.Client
@using OOCL.Image.Shared
@using Radzen.Blazor
@using Radzen
@using Microsoft.JSInterop
@using System.Globalization
@inject ApiClient Api
@inject WebAppConfig Config
@inject NotificationService Notifications
@inject IJSRuntime JS
@inject DialogService DialogService

<PageTitle>Audio</PageTitle>

<link rel="stylesheet" href="/css/site.css" />

<RadzenCard Style="max-width:1100px;margin:auto;margin-top:2rem;">
    <h3>Audio</h3>
    <div style="display:flex;gap:12px;align-items:center;margin-bottom:8px;">
        <RadzenButton Icon="upload" Text="Upload" Click="@ShowFileDialog" />
        <RadzenButton Icon="refresh" Text="Reload" Click="@Reload" />
        <span style="margin-left:auto;font-size:.9rem;color:gray;">
            @(VM == null ? "Loading..." : $"{VM.AudioEntries?.Count ?? 0} Track(s) loaded (of max. {VM.MaxTracks}) ca. {VM.DataLocation} (max. API request size: {VM.MaxUploadSizeMb} MB)")
        </span>
    </div>

    <!-- Neu: Card mit BPM / Stretch Controls (Toggle + 3 Numerics) -->
    <div style="margin-bottom:12px;">
        <RadzenCard>
            <div style="display:flex;align-items:center;gap:12px;">
                <div style="font-weight:600;">Stretch / BPM</div>
                <div style="margin-left:auto;display:flex;align-items:center;gap:.5rem;">
                    <label style="font-size:.9rem;margin:0;">Enable</label>
                    <RadzenCheckBox @bind-Value="VM.EnableStretchControls" TValue="bool" />
                </div>
            </div>

            @if (VM.EnableStretchControls)
            {
                <div style="display:flex;gap:12px;align-items:center;margin-top:.6rem;">
                    <div style="min-width:140px;">
                        <label style="display:block;font-size:.85rem;margin-bottom:.25rem;">Initial BPM</label>
                        <RadzenNumeric TValue="decimal"
                                       @bind-Value="VM.InitialBpm"
                                       Min="0"
                                       Max="360"
                                       Step="0.001"
                                       Style="width:140px;" Disabled="true" />
                    </div>

                    <div style="min-width:160px;">
                        <label style="display:block;font-size:.85rem;margin-bottom:.25rem;">Target BPM</label>
                        <RadzenNumeric TValue="decimal"
                                       Value="VM.TargetBpm"
                                       Change="@( (decimal v) => OnTargetBpmChanged(v) )"
                                       Min="0"
                                       Max="360"
                                       Step="0.001"
                                       Style="width:160px;" />
                    </div>

                    <div style="min-width:260px;">
                        <label style="display:block;font-size:.85rem;margin-bottom:.25rem;">Stretch Factor</label>
                        <RadzenNumeric TValue="decimal"
                                       Value="VM.StretchFactor"
                                       Change="@( (decimal v) => OnStretchFactorChanged(v) )"
                                       Min="0.01m"
                                       Max="10m"
                                       Step="0.000000000001"
                                       Style="width:260px;" />
                    </div>
                </div>
            }
        </RadzenCard>
    </div>

    <div style="display:flex;gap:12px;">
        <div style="flex:1 1 300px;">
            <RadzenListBox Data="@VM.AudioEntries"
                           @bind-Value="selectedId"
                           ValueProperty="Id"
                           Style="width:100%;min-height:200px;"
                           Change="@OnSelectionChanged">
                <Template Context="item">
                    <div style="display:flex;justify-content:space-between;align-items:center;padding:.35rem;">
                        <div>
                            <div style="font-weight:600;">@item.Name</div>
                            <div style="font-size:.85rem;color:gray;">Bpm: @item.Bpm</div>
                            <div style="font-size:.85rem;color:gray;">Duration: @item.DurationSeconds s</div>
                            <div style="font-size:.85rem;color:gray;">Bytes: @item.BytesCount s</div>
                        </div>
                        <div style="display:flex;gap:.35rem;">
                            <RadzenButton Size="ButtonSize.Small" Icon="play_arrow" Click="@(async () => await VM.PlayAsync(item.Id))" />
                            <RadzenButton Size="ButtonSize.Small" Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(async () => await Remove(item.Id))" />
                        </div>
                    </div>
                </Template>
            </RadzenListBox>
        </div>

        <div style="flex:2 1 500px;">
            <RadzenCard>
                <h4>Selected audio</h4>
                @if (selected != null)
                {
                    <div>
                        <div><b>Name:</b> @selected.Name</div>
                        <div><b>Duration:</b> @selected.DurationSeconds s</div>
                        <div><b>Original BPM:</b> @selected.Bpm.ToString("F3")</div>
                        <div style="margin-top:.5rem;">
                            <RadzenButton Icon="play_arrow" Text="Play" Click="@(async () => await VM.PlayAsync(selected.Id))" />
                            <RadzenButton Icon="audiotrack" Text="Process" Click="@(async () => await VM.ProcessAsync(selected.Id))" Style="margin-left:.5rem;" />
                        </div>
                    </div>
                }
                else
                {
                    <div style="color:gray;">No selection</div>
                }
            </RadzenCard>
        </div>
    </div>
</RadzenCard>

<!-- Hidden file input used by Upload button -->
<InputFile id="fileInputHidden" style="display:none" OnChange="@OnInputFileChange" accept="audio/*" />

@code {
    [CascadingParameter] public OpenClServiceInfo? LayoutOpenClInfo { get; set; }
    [CascadingParameter] public List<OpenClKernelInfo>? LayoutKernelInfos { get; set; }

    private AudioViewModel VM = null!;
    private Guid selectedId = Guid.Empty;
    private AudioViewModel.AudioEntry? selected;

    protected override async Task OnInitializedAsync()
    {
        VM = new AudioViewModel(Api, Config, Notifications, JS, DialogService);

        if (LayoutKernelInfos != null && LayoutKernelInfos.Count > 0)
        {
            VM.InjectPreloadedMeta(LayoutOpenClInfo, LayoutKernelInfos);
        }

        await VM.InitializeAsync();
        if (VM.AudioEntries.Count > 0)
        {
            selectedId = VM.AudioEntries.FirstOrDefault()?.Id ?? Guid.Empty;
            selected = VM.AudioEntries.FirstOrDefault();
            VM.SetSelectedTrack(selected);
        }
    }

    private void ShowFileDialog() => JS.InvokeVoidAsync("eval", "document.getElementById('fileInputHidden').click()");
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        await VM.OnInputFileChange(e);
        await VM.ReloadAsync();
        StateHasChanged();
    }

    private async Task Reload()
    {
        await VM.ReloadAsync();
        StateHasChanged();
    }

    private async Task OnSelectionChanged(object value)
    {
        if (value is Guid g)
        {
            selectedId = g;
            selected = VM.AudioEntries.FirstOrDefault(a => a.Id == g);
            VM.SetSelectedTrack(selected);
            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private async Task Remove(Guid id)
    {
        await VM.RemoveAsync(id);
        if (selectedId == id) { selectedId = Guid.Empty; selected = null; }
        StateHasChanged();
    }

    private void OnTargetBpmChanged(decimal value)
    {
        VM.TargetBpm = value;
        VM.UpdateStretchFromTarget();
        StateHasChanged();
    }

    private void OnStretchFactorChanged(decimal value)
    {
        VM.StretchFactor = value;
        VM.UpdateTargetFromStretch();
        StateHasChanged();
    }
}
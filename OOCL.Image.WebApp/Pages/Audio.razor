@page "/audio"
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using OOCL.Image.Client
@using OOCL.Image.Shared
@using Radzen.Blazor
@using Radzen
@using Microsoft.JSInterop
@using System.Globalization
@inject ApiClient Api
@inject WebAppConfig Config
@inject NotificationService Notifications
@inject IJSRuntime JS
@inject DialogService DialogService

<PageTitle>OOCL.work: Audio</PageTitle>

<link rel="stylesheet" href="/css/site.css" />

@if (VM == null)
{
    <RadzenCard Style="max-width:1100px;margin:auto;margin-top:2rem;">
        <h3>api.OOCL.work: Audio</h3>
        <div>Loading...</div>
    </RadzenCard>
}
else
{
    <RadzenCard Style="max-width:1100px;margin:auto;margin-top:2rem;">
        <h3>Audio</h3>
        <div style="display:flex;gap:12px;align-items:center;margin-bottom:8px;">
            <RadzenButton Icon="upload" Text="Upload" Click="@ShowFileDialog" Disabled="@(VM.IsUploading)" />
            <RadzenButton Icon="refresh" Text="Reload" Click="@Reload" />
            <div style="margin-left:auto;font-size:.9rem;color:gray;white-space:pre-line;">
                @($"{VM.AudioEntries?.Count ?? 0} Track(s) loaded (of max. {VM.MaxTracks})\n{VM.DataLocation}\n(max. API request size: {VM.MaxUploadSizeMb} MB)\n{VM.CompressionInfoText}")
            </div>
        </div>

        <!-- Neu: Card mit BPM / Stretch Controls (Toggle + 3 Numerics) -->
        <div style="margin-bottom:12px;">
            <RadzenCard>
                <div style="display:flex;align-items:center;gap:12px;">
                    <div style="font-weight:600;">Stretch / BPM</div>
                    <div style="margin-left:auto;display:flex;align-items:center;gap:.5rem;">
                        <label style="font-size:.9rem;margin:0;">Enable</label>
                        <RadzenCheckBox @bind-Value="VM.EnableStretchControls" TValue="bool" />
                    </div>
                </div>

                @if (VM.EnableStretchControls)
                {
                    <div style="display:flex;gap:12px;align-items:center;margin-top:.6rem;">
                        <div style="min-width:140px;">
                            <label style="display:block;font-size:.85rem;margin-bottom:.25rem;">Initial BPM</label>
                            <RadzenNumeric TValue="decimal"
                                           @bind-Value="VM.InitialBpm"
                                           Min="0"
                                           Max="360"
                                           Step="0.001"
                                           Style="width:140px;" Disabled="true" />
                        </div>

                        <div style="min-width:160px;">
                            <label style="display:block;font-size:.85rem;margin-bottom:.25rem;">Target BPM</label>
                            <RadzenNumeric TValue="decimal"
                                           Value="VM.TargetBpm"
                                           Change="@( (decimal v) => OnTargetBpmChanged(v) )"
                                           Min="0"
                                           Max="360"
                                           Step="0.5"
                                           Style="width:160px;" />
                        </div>

                        <div style="min-width:260px;">
                            <label style="display:block;font-size:.85rem;margin-bottom:.25rem;">Stretch Factor</label>
                            <RadzenNumeric TValue="decimal"
                                           Value="VM.StretchFactor"
                                           Change="@( (decimal v) => OnStretchFactorChanged(v) )"
                                           Min="0.01m"
                                           Max="10m"
                                           Step="0.00000001"
                                           Style="width:260px;" />
                        </div>

                        <div style="min-width:120px;">
                            <label style="display:block;font-size:.85rem;margin-bottom:.25rem;">Chunk Size</label>
                            <RadzenNumeric TValue="int"
                                           Value="VM.ChunkSize"
                                           Change="@( (int v) => OnChunkSizeChanged(v) )"
                                           Min="128"
                                           Max="65536"
                                           Step="1"
                                           Style="width:120px;" />
                        </div>

                        <div style="min-width:100px;">
                            <label style="display:block;font-size:.85rem;margin-bottom:.25rem;">Overlap</label>
                            <RadzenNumeric TValue="decimal"
                                           Value="VM.Overlap"
                                           Change="@( (decimal v) => OnOverlapChanged(v) )"
                                           Min="0.0m"
                                           Max="0.9m"
                                           Step="0.01"
                                           Style="width:100px;" />
                        </div>
                    </div>
                }
            </RadzenCard>
        </div>

        <div style="display:flex;gap:12px;">
            <div style="flex:1 1 300px;">
                <RadzenListBox Data="@VM.AudioEntries"
                               @bind-Value="selectedId"
                               ValueProperty="Id"
                               Style="width:100%;min-height:200px;"
                               Change="@OnSelectionChanged">
                    <Template Context="item">
                        <div style="display:flex;justify-content:space-between;align-items:center;padding:.35rem;">
                            <div>
                                <div style="font-weight:600;">@item.Name</div>
                                <div style="font-size:.85rem;">Bpm: @item.Bpm</div>
                                <div style="font-size:.85rem;">Duration: @item.DurationSeconds s</div>
                                <div style="font-size:.85rem;">Data: @item.BytesCount B</div>
                                <div style="font-size:.85rem;">Exec: @item.LastExecTime ms</div>
                            </div>
                            <div style="display:flex;gap:.35rem;">
                                <RadzenButton Size="ButtonSize.Small" Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(async () => await Remove(item.Id))" />
                            </div>
                        </div>
                    </Template>
                </RadzenListBox>
            </div>

            <div style="flex:2 1 500px;">
                <RadzenCard>
                    <h4>Selected audio</h4>
                    @if (selected != null)
                    {
                        <div>
                            <div><b>Name:</b> @selected.Name</div>
                            <div><b>Duration:</b> @selected.DurationSeconds s</div>
                            <div><b>Original BPM:</b> @selected.Bpm.ToString("F3")</div>
                            <div style="margin-top:.5rem;">
                                <RadzenButton Icon="play_arrow" Text="Play" Click="@(async () => await VM.PlayAsync(selected.Id))" />
                                <RadzenButton Icon="audiotrack" Text="Process" Click="@(async () => await OnProcessClick())" Style="margin-left:.5rem;" Disabled="@(isProcessing || VM.IsProcessing || selected == null)" />
                                <RadzenButton Icon="download" Click="@(async () => await OnDownloadClick())" Disabled="@(isDownloading || VM.IsDownloading || selected == null)" />
                                <RadzenDropDown TValue="string"
                                                Data="@(VM.AvailableDownloadFormats?.Keys ?? Enumerable.Empty<string>())"
                                                Value="@VM.DownloadAudioType"
                                                Change="@((args) => OnFormatChanged(args as string))"
                                                Style="width:100px;"
                                                Placeholder="Format" />
                                <RadzenDropDown TValue="int"
                                                Data="@( GetBitsForSelected() )"
                                                @bind-Value="VM.DownloadAudioBits"
                                                Style="width:100px;"
                                                Placeholder="Bits" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div style="color:gray;">No selection</div>
                    }
                </RadzenCard>
            </div>
        </div>
    </RadzenCard>
     <div style="margin-bottom:12px;">
        <RadzenCard>
            <div style="display:flex;align-items:center;gap:12px;">
                <div style="font-weight:600;">Upload & Exec</div>
                <div style="margin-left:auto;display:flex;align-items:center;gap:.5rem;">
                    <RadzenButton Icon="upload" Text="Upload & Exec" Click="@ShowUploadAndExecDialog" Disabled="@(VM.IsUploading || VM.IsProcessing)" />
                </div>
            </div>
            <div style="margin-top:.6rem;color:gray;font-size:.9rem;">
                Directly sends your uploaded file to the API and returns a processed whole file (no Client serialization or caching needed).
            </div>
        </RadzenCard>
    </div>
}

<!-- Hidden file input used by Upload button -->
<InputFile id="fileInputHidden" style="display:none" OnChange="@OnInputFileChange" accept="audio/*" />
<!-- Hidden file input used by Upload & Exec Card -->
<InputFile id="fileInputExec" style="display:none" OnChange="@OnUploadAndStretchUI" accept="audio/*" />

@code {
    [CascadingParameter] public OpenClServiceInfo? LayoutOpenClInfo { get; set; }
    [CascadingParameter] public List<OpenClKernelInfo>? LayoutKernelInfos { get; set; }

    private AudioViewModel VM = null!;
    private Guid selectedId = Guid.Empty;
    private AudioViewModel.AudioEntry? selected;

    // Local UI flag to reflect download/process in progress immediately
    private bool isDownloading = false;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        VM = new AudioViewModel(Api, Config, Notifications, JS, DialogService);

        if (LayoutKernelInfos != null && LayoutKernelInfos.Count > 0)
        {
            VM.InjectPreloadedMeta(LayoutOpenClInfo, LayoutKernelInfos);
        }

        await VM.InitializeAsync();
        if (VM.AudioEntries.Count > 0)
        {
            selectedId = VM.AudioEntries.FirstOrDefault()?.Id ?? Guid.Empty;
            selected = VM.AudioEntries.FirstOrDefault();
            VM.SetSelectedTrack(selected);
        }
    }

    private void ShowFileDialog() => JS.InvokeVoidAsync("eval", "document.getElementById('fileInputHidden').click()");
    private void ShowUploadAndExecDialog() => JS.InvokeVoidAsync("eval", "document.getElementById('fileInputExec').click()");

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        await VM.OnInputFileChange(e);
        await VM.ReloadAsync();
        StateHasChanged();
    }

    private async Task OnUploadAndStretchUI(InputFileChangeEventArgs e)
    {
        if (e == null) return;

        // UI flags während des Upload+Exec
        isProcessing = true;
        StateHasChanged();
        try
        {
            await VM.OnUploadAndStretch(e);
            // Nach erfolgreichem Upload/Exec: neu laden
            await VM.ReloadAsync();
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task Reload()
    {
        await VM.ReloadAsync();
        StateHasChanged();
    }

    private async Task OnSelectionChanged(object value)
    {
        if (value is Guid g)
        {
            selectedId = g;
            selected = VM.AudioEntries.FirstOrDefault(a => a.Id == g);
            VM.SetSelectedTrack(selected);
            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private async Task Remove(Guid id)
    {
        await VM.RemoveAsync(id);
        if (selectedId == id) { selectedId = Guid.Empty; selected = null; }
        StateHasChanged();
    }

    private void OnTargetBpmChanged(decimal value)
    {
        VM.TargetBpm = value;
        VM.UpdateStretchFromTarget();
        StateHasChanged();
    }

    private void OnStretchFactorChanged(decimal value)
    {
        VM.StretchFactor = value;
        VM.UpdateTargetFromStretch();
        StateHasChanged();
    }

    private void OnChunkSizeChanged(int value)
    {
        // VM.ToggleChunkSize expects a numeric value; it snaps to nearest power of two
        VM.ToggleChunkSize(value);
        StateHasChanged();
    }

    private void OnOverlapChanged(decimal value)
    {
        // clamp to 0.0 - 0.9 and set on VM
        var v = Math.Clamp((double)value, 0.0, 0.9);
        VM.Overlap = (decimal)Math.Round(v, 2);
        StateHasChanged();
    }

    private async Task OnDownloadClick()
    {
        if (selectedId == Guid.Empty) return;
        if (isDownloading) return;

        isDownloading = true;
        StateHasChanged();
        try
        {
            await VM.DownloadAudio(selectedId);
        }
        finally
        {
            isDownloading = false;
            StateHasChanged();
        }
    }

    private async Task OnProcessClick()
    {
        if (selected == null) return;
        if (isProcessing) return;

        isProcessing = true;
        StateHasChanged();
        try
        {
            await VM.ProcessAsync(selected.Id);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private IEnumerable<int> GetBitsForSelected()
    {
        if (VM?.AvailableDownloadFormats == null) return Enumerable.Empty<int>();
        if (string.IsNullOrWhiteSpace(VM.DownloadAudioType)) return Enumerable.Empty<int>();
        return VM.AvailableDownloadFormats.TryGetValue(VM.DownloadAudioType, out var arr) ? arr : Enumerable.Empty<int>();
    }

    private void OnFormatChanged(string? value)
    {
        if (VM == null) return;
        VM.DownloadAudioType = value ?? string.Empty;
        if (VM.AvailableDownloadFormats != null && VM.AvailableDownloadFormats.TryGetValue(value ?? "", out var bits) && bits.Length > 0)
        {
            // preserve current bit if valid, otherwise pick first available
            if (!bits.Contains(VM.DownloadAudioBits))
            {
                try
                {
                    VM.DownloadAudioBits = bits[1];
                }
                catch
                {
                    VM.DownloadAudioBits = bits.FirstOrDefault();
                }
            }
        }
        else
        {
            VM.DownloadAudioBits = 0;
        }
        StateHasChanged();
    }
}
@page "/explorer"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@using Radzen.Blazor
@using OOCL.Image.Shared
@using OOCL.Image.Client
@inject ApiClient Api
@inject WebAppConfig Config
@inject NotificationService Notifications
@inject IJSRuntime JS
@inject DialogService DialogService

<PageTitle>OOCL: Fractals Explorer</PageTitle>

<link rel="stylesheet" href="/css/site.css" />

@if (VM == null)
{
    <div style="padding:1rem;">Loading...</div>
}
else
{
    <div class="explorer-root" style="max-width:1400px;margin:0 auto;padding:0.75rem;display:flex;flex-direction:column;gap:0.75rem;">
        <div style="display:flex;flex-wrap:wrap;align-items:flex-end;gap:1rem;">
            <div style="min-width:240px;">
                <label style="font-weight:600;font-size:0.8rem;">OpenCL Status</label>
                <div style="font-size:0.8rem;line-height:1.2;">@VM.StatusSummary</div>
            </div>
            <div style="display:flex;align-items:center;gap:0.4rem;">
                <label style="font-size:0.75rem;">Width</label>
                <RadzenNumeric TValue="int"
                               Value="@VM.Width"
                               ValueChanged="@(async (int v)=> { VM.SetSnappedWidth(v); await OnResolutionChanged(); })"
                               Min="4" Max="16384" Style="width:100px;" />
                <label style="font-size:0.75rem;">Height</label>
                <RadzenNumeric TValue="int"
                               Value="@VM.Height"
                               ValueChanged="@(async (int v)=> { VM.SetSnappedHeight(v); await OnResolutionChanged(); })"
                               Min="4" Max="16384" Style="width:100px;" />
                <RadzenButton Text="Reset" Size="ButtonSize.Small" Click="async ()=> await VM.ResetViewAsync()" Style="margin-left:0.5rem;" />
            </div>
            <div style="display:flex;align-items:center;gap:0.6rem;font-size:0.7rem;">
                <div>Zoom: @VM.Zoom.ToString("F9", System.Globalization.CultureInfo.InvariantCulture)</div>
                <div>Iter: @VM.Iterations</div>
                <div>OffX: @VM.OffsetX.ToString("F3")</div>
                <div>OffY: @VM.OffsetY.ToString("F3")</div>
            </div>
            <div style="display:flex;align-items:center;gap:.5rem;">
                <RadzenColorPicker @bind-Value="VM.ColorHex"
                                   Disabled="@(!VM.HasColorGroup)"
                                   Style="width:140px;"
                                   ShowRGBA="true"
                                   Change="@(async (string v) => await OnColorPicked(v))" />
                <!-- Angepasst: tatsächliche RGB-Werte anzeigen -->
                <span style="font-size:.65rem;opacity:.8;">
                    Color @(VM.HasColorGroup ? $"R:{VM.Red} G:{VM.Green} B:{VM.Blue}" : "n/a")
                </span>
            </div>

            <!-- NEU: Kernel Auswahl (nur Create-/Non-Image-Kernels) -->
            <div style="display:flex;align-items:center;gap:.4rem;">
                <label style="font-size:0.7rem;">Kernel</label>
                <RadzenDropDown TValue="string"
                                Data="@VM.AvailableCreateKernelNames"
                                Value="@VM.SelectedKernelName"
                                Change="@((args) => OnKernelChanged(args as string))"
                                Style="min-width:220px;"
                                Placeholder="Select kernel..." />
            </div>

            <div style="flex:1 1 auto;"></div>
            <div>
                <RadzenButton Text="Render" Icon="play_arrow" Click="async ()=> await VM.RenderAsync(true)" Disabled="@(VM == null)" />
                <label style="font-size:0.75rem;margin-left:0.5rem;">Auto-Refresh</label>
                <RadzenCheckBox @bind-Value="VM.RefreshEveryMove" TValue="bool" Style="margin-left:0.5rem;vertical-align:middle;" />
            </div>
        </div>

        <div class="explorer-image-wrapper" style="position:relative;border:1px solid var(--rz-border-color,#444);background:#111;min-height:320px;display:flex;align-items:center;justify-content:center;">
            @if (VM != null && VM?.CurrentImageData != null && !string.IsNullOrEmpty(VM.CurrentImageData.Base64Data))
            {
                <img @ref="imageRef"
                     src="data:@(VM.CurrentImageData?.MimeType ?? "image/png");base64,@VM.CurrentImageData?.Base64Data"
                     style="max-width:100%;max-height:80vh;object-fit:contain;cursor:@(VM.IsDragging?"grabbing":"grab");user-select:none;"
                     @onmousedown="OnMouseDown"
                     @onmouseup="OnMouseUp"
                     @onmouseleave="OnMouseUp"
                     @onmousemove="OnMouseMove"
                     @onwheel="OnWheel"
                     draggable="false" />
            }
            else
            {
                <span style="color:#777;font-size:0.85rem;">No image yet</span>
            }

            <!-- Kombinierter Overlay (Bedienhinweis + Renderstatus) -->
            <div style="position:absolute;bottom:6px;right:8px;font-size:0.65rem;color:#ccc;background:rgba(0,0,0,.45);padding:4px 8px;border-radius:4px;display:flex;flex-direction:column;gap:2px;align-items:flex-end;">
                <span>Drag = Pan | Wheel = Zoom | Shift+Wheel = Iter</span>
                @if (VM?.IsRendering == true)
                {
                    <span>Rendering...</span>
                }
                else if (VM?.CurrentImageInfo != null)
                {
                    <span>Last Render: @VM.CurrentImageInfo.LastProcessingTimeMs ms</span>
                }
            </div>
        </div>
        <div>
            <!-- Label with VM.RecordedStatus + CheckBox for recording -->
            <RadzenCheckBox @bind-Value="VM.RecordToClientCollection" TValue="bool" Style="margin-top:8px" Change="@VM.OnRecordToClientCollectionChanged"></RadzenCheckBox>
            <label style="font-size:0.9em;margin-right:4px;">Recording: @(VM.RecordedStatus)</label>
            <div>
                <!-- Download as Gif button with checkbox doLoop, numericUD frameRate, numericUD rescaleFactor -->
                <RadzenButton Icon="gif" Text="Download GIF" Click="@DownloadGif" Disabled="@(!CanDownload)" Style="margin-top:8px;" />
                <label style="font-size:0.9em;margin-right:4px;">FrameRate:</label>
                <RadzenNumeric TValue="int" @bind-Value="VM.GifFrameRate" Min="1" Max="144" Style="width:80px;" Disabled="@(VM == null)" />
                <label style="font-size:0.9em;margin:0 8px 0 16px;">Rescale:</label>
                <RadzenNumeric TValue="double" @bind-Value="VM.GifScalingFactor" Min="@(GifRescaleMin)" Max="@(GifRescaleMax)" Step="0.01" Style="width:80px;" />
                <label style="font-size:0.9em;margin:0 8px 0 16px;">Loop:</label>
                <RadzenCheckBox @bind-Value="VM.GifDoLoop" TValue="bool" Style="margin-top:8px;" />
            </div>
        </div>

        <!-- Floating Mobile Control Panel -->
        <div style="position:fixed;top:10px;right:10px;z-index:1500;">
            <button @onclick="()=> controlsOpen = !controlsOpen"
                    title="Steuerpanel ein/aus"
                    style="background:#222;color:#eee;border:1px solid #555;
                           width:34px;height:34px;border-radius:6px;
                           font-size:1.1rem;cursor:pointer;">
                @(controlsOpen ? "−" : "+")
            </button>

            @if (controlsOpen)
            {
                <div style="margin-top:6px;
                            background:rgba(20,20,20,0.92);
                            backdrop-filter:blur(4px);
                            padding:10px 12px;
                            border:1px solid #444;
                            border-radius:8px;
                            width:205px;
                            display:flex;
                            flex-direction:column;
                            gap:10px;
                            box-shadow:0 4px 12px rgba(0,0,0,.45);
                            font-size:.75rem;">

                    <div style="text-align:center;font-weight:600;letter-spacing:.5px;">Navigation</div>

                    <!-- Pan Controls -->
                    <div style="display:flex;flex-direction:column;align-items:center;gap:4px;">
                        <div>
                            <button @onclick="()=>BtnPan(0,-1)" style="width:46px;height:38px;">↑</button>
                        </div>
                        <div style="display:flex;gap:6px;">
                            <button @onclick="()=>BtnPan(-1,0)" style="width:46px;height:38px;">←</button>
                            <button @onclick="()=>BtnPan(1,0)"  style="width:46px;height:38px;">→</button>
                        </div>
                        <div>
                            <button @onclick="()=>BtnPan(0,1)" style="width:46px;height:38px;">↓</button>
                        </div>
                    </div>

                    <div style="display:flex;justify-content:space-between;gap:6px;">
                        <!-- Iteration Controls -->
                        <div style="flex:1;display:flex;flex-direction:column;gap:4px;">
                            <div style="text-align:center;font-weight:500;">Iter</div>
                            <button @onclick="()=>BtnIter(1)"  style="height:32px;background:#284a80;color:#fff;">+</button>
                            <button @onclick="()=>BtnIter(-1)" style="height:32px;background:#192d4d;color:#fff;">−</button>
                        </div>

                        <!-- Zoom Controls -->
                        <div style="flex:1;display:flex;flex-direction:column;gap:4px;">
                            <div style="text-align:center;font-weight:500;">Zoom</div>
                            <button @onclick="()=>BtnZoom(true)"  style="height:32px;background:#3c7d2f;color:#fff;">+</button>
                            <button @onclick="()=>BtnZoom(false)" style="height:32px;background:#28561f;color:#fff;">−</button>
                        </div>
                    </div>

                    <div style="text-align:center;opacity:.7;">
                        <div>Z: @VM?.Zoom.ToString("G5", System.Globalization.CultureInfo.InvariantCulture)</div>
                        <div>Iter: @VM?.Iterations</div>
                    </div>
                </div>
            }
        </div>
    </div>

    
}

@code {
    // Cascading Parameters müssen im @code Block stehen
    [CascadingParameter] public OpenClServiceInfo? LayoutOpenClInfo { get; set; }
    [CascadingParameter] public List<OpenClKernelInfo>? LayoutKernelInfos { get; set; }

    private ExplorerViewModel? VM;
    private ElementReference imageRef;

    private bool CanDownload => VM != null && VM.ClientImageCollection != null && VM.ClientImageCollection.Count > 0;
    private decimal GifRescaleMin = 0.1m;
    private decimal GifRescaleMax = 5.0m;

    protected override async Task OnInitializedAsync()
    {
        VM = new ExplorerViewModel(Api, Config, Notifications, JS, DialogService);

        // Vorab-Meta übernehmen falls vorhanden
        if (LayoutKernelInfos != null && LayoutKernelInfos.Count > 0)
        {
            VM.InjectPreloadedMeta(LayoutOpenClInfo, LayoutKernelInfos);
        }

        await VM.InitializeAsync();
    }

    private async Task OnKernelChanged(string? kernelName)
    {
        if (VM == null || string.IsNullOrWhiteSpace(kernelName)) return;
        VM.SetSelectedKernel(kernelName);
        await VM.RenderAsync(true);
        StateHasChanged();
    }

    private async Task OnResolutionChanged()
    {
        if (VM == null) return;
        

        await VM.OnResolutionChangedAsync();
        StateHasChanged();
    }

    private async Task OnWheel(WheelEventArgs e)
    {
        if (VM == null) return;
        await VM.OnWheelAsync(e);
        StateHasChanged();
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        if (VM == null) return;
        VM.OnMouseDown(e.ClientX, e.ClientY);
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        if (VM == null) return;
        await VM.OnMouseMoveAsync(e.ClientX, e.ClientY);
        StateHasChanged();
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        if (VM == null) return;
        await VM.OnMouseUpAsync();
        StateHasChanged();
    }

    private async Task OnColorPicked(string? hex)
    {
        if (VM == null) return;
        VM.ApplyPickedColor(hex);
        if (VM.RefreshEveryMove)
        {
            await VM.RenderAsync(true);
        }
        StateHasChanged();
    }

    private async Task DownloadGif()
    {
        if (VM == null) return;
        await VM.DownloadCreateGif(false);
        StateHasChanged();
    }

    private bool controlsOpen = false;

    private async Task BtnPan(int dx, int dy)
    {
        if (VM == null) return;
        await VM.PanAsync(dx, dy);
        StateHasChanged();
    }

    private async Task BtnZoom(bool zin)
    {
        if (VM == null) return;
        await VM.AdjustZoomAsync(zin);
        StateHasChanged();
    }

    private async Task BtnIter(int dir)
    {
        if (VM == null) return;
        await VM.AdjustIterationsAsync(dir);
        StateHasChanged();
    }

}
@page "/"
@using System.Linq
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using OOCL.Image.Client
@using OOCL.Image.Shared
@using Radzen
@using Radzen.Blazor
@using Microsoft.JSInterop
@using System.Globalization
@inject ApiClient Api
@inject WebAppConfig Config
@inject NotificationService Notifications
@inject IJSRuntime JS
@inject DialogService DialogService

<PageTitle>Home</PageTitle>

<link rel="stylesheet" href="~/css/site.css" />
<link rel="icon" type="image/x-icon" href="favicon.ico" />

<RadzenCard Style="max-width:1200px;margin:auto;margin-top:2rem;">
    <!-- OpenCL Device Row -->
    <div class="d-flex flex-row gap-3 align-items-stretch mb-4">
        <!-- Device Selection -->
        <RadzenCard Style="min-width:320px;flex:1;display:flex;flex-direction:column;justify-content:space-between;">
            <div>
                <h4>OpenCL Device</h4>
                <RadzenDropDown TValue="int" Data="@devices" @bind-Value="selectedDeviceIndex"
                                TextProperty="DeviceName" ValueProperty="DeviceId"
                                Style="width:100%;margin-bottom:0.5rem;"
                                Change="@OnDeviceChanged">
                    <Template Context="device">
                        @device.DeviceName (@device.DeviceType)
                    </Template>
                </RadzenDropDown>
            </div>
        </RadzenCard>
        <!-- Status Info -->
        <RadzenCard Style="min-width:220px;flex:1;display:flex;flex-direction:column;justify-content:center;">
            <div class="status-info-box">
                <b>Status:</b> @openClServiceInfo.DeviceName <br />
                <b>Platform:</b> @openClServiceInfo.PlatformName <br />
                <b>Initialized:</b> @(openClServiceInfo.Initialized ? "Yes" : "No")
            </div>
        </RadzenCard>
        <!-- Actions Vertical -->
        <RadzenCard Style="min-width:140px;flex:0 0 140px;display:flex;flex-direction:column;gap:0.5rem;align-items:stretch;justify-content:center;">
            <RadzenButton Icon="play_arrow" Text="Initialize" Click="@InitializeDevice" Style="margin-bottom:0.5rem;" />
            <RadzenButton Icon="close" Text="Dispose" ButtonStyle="ButtonStyle.Danger" Click="@ReleaseDevice" Style="margin-bottom:0.5rem;" />
            <RadzenButton Icon="refresh" Text="Refresh" ButtonStyle="ButtonStyle.Light" Click="@ReloadDevices" />
        </RadzenCard>
    </div>

    <!-- Generic Image Kernel Execution Card -->
    <RadzenCard Style="margin-bottom:1.5rem;">
        <h4>Generic Image Kernel Execution</h4>
        <div class="d-flex flex-row align-items-center gap-3 mb-2">
            <RadzenDropDown TValue="string" Data="@kernelNames" @bind-Value="selectedKernelName" Style="min-width:220px;" Change="@OnKernelChanged" Placeholder="Select kernel..." />
        </div>
        <div class="d-flex flex-row align-items-center gap-2 mb-2">
            <RadzenCheckBox @bind-Value="useExistingImage" TValue="bool" Change="@OnUseExistingImageChanged" />
            <span>@(useExistingImage ? "on existing image" : "on new blank")</span>
        </div>

        <!-- Color picker: always visible (from image OR new blank) -->
        <div class="d-flex flex-column gap-1 mb-2">
            <div class="d-flex align-items-center gap-2">
                <label style="font-size:0.95em;">Color:</label>
                <label style="font-size:0.95em;">@GetRgbLabel(colorHexForNewImage)</label>
            </div>
            <div class="d-flex flex-row align-items-center gap-2">
                <RadzenColorPicker Value="@colorHexForNewImage" ValueChanged="@OnBaseColorChanged" Style="min-width:120px;" ShowRGBA="true" />
            </div>
        </div>

        @if (kernelArgViewModels.Any(a => !a.IsPointer && IsColorGroupRepresentative(a) || !a.IsPointer && !a.IsColor))
        {
            // Filter: Zeige keine Color-Argumente als Numeric, wenn sie vom Color-Picker gesetzt werden
            var numericArgs = kernelArgViewModels.Where(a => !a.IsPointer && !a.IsColor && !IsColorGroupRepresentative(a)).OrderBy(a => a.Index).ToList();
            int count = numericArgs.Count;
            int columns = count <= 2 ? count : count <= 4 ? 2 : count <= 9 ? 3 : 4;
            <div style="display:grid;grid-template-columns:repeat(@columns,1fr);gap:12px 16px;margin-bottom:12px;">
                @foreach (var arg in numericArgs)
                {
                    <div style="display:flex;flex-direction:column;align-items:flex-start;">
                        <label style="font-size:0.95em;">@arg.Name<br /><span style="font-size:0.85em;color:gray;">(@arg.Type)</span></label>
                        @if (IsWidthOrHeight(arg))
                        {
                            <RadzenNumeric TValue="decimal"
                                           style="min-width:90px;"
                                           Value="@arg.Value"
                                           ValueChanged="@((decimal v) => OnDimensionNumericChanged(arg, v))"
                                           Min="@arg.Min" Max="@arg.Max"
                                           Step="1"
                                           Disabled="@(useExistingImage)" />
                        }
                        else
                        {
                            <RadzenNumeric TValue="decimal" style="min-width:90px;" @bind-Value="arg.Value" Step="@arg.StepString" Min="@arg.Min" Max="@arg.Max" Change="@((decimal v) => OnArgChanged(arg, v))" />
                        }
                    </div>
                }
            </div>
        }
        <!-- Redraw Checkbox directly below kernel args -->
        <div class="d-flex flex-row align-items-center gap-2 mb-2">
            <RadzenCheckBox @bind-Value="VM.redrawAfterValueChange" TValue="bool" />
            <label style="font-size:0.9em;margin:0;">Redraw on value change</label>
        </div>
        <RadzenPanel @bind-Expanded="isKernelInfoExpanded" Style="margin-bottom:0.5rem;">
            <HeaderTemplate>
                <b>Kernel Arguments Info</b>
            </HeaderTemplate>
            <ChildContent>
                <RadzenTextArea @bind-Value="kernelInfoText" Rows="12" ReadOnly="true" Style="width:100%;height:320px;font-family:monospace;font-size:0.75rem;white-space:pre;" />
            </ChildContent>
        </RadzenPanel>
        <RadzenButton Icon="play_arrow" Text="Execute" Click="@ExecuteKernel" Disabled="@(!CanExecute)" Style="width:100%;margin-top:1rem;margin-bottom:0.5rem;" />
        <div style="margin-top:0.5rem;font-size:0.95em;">
            <b>Last Processing-Time:</b> @lastKernelProcessingTimeMs ms
        </div>
    </RadzenCard>

    <!-- Image Row -->
    <div class="d-flex flex-row gap-3 align-items-stretch">
        <!-- PictureBox -->
        <RadzenCard Style="flex:2;min-width:320px;display:flex;align-items:center;justify-content:center;position:relative;min-height:320px;">
            <div style="resize:both;overflow:auto;min-width:200px;min-height:200px;max-width:100%;max-height:500px;border:1px solid #ccc;background:#222;display:flex;align-items:center;justify-content:center;">
                @if (imageData != null && !string.IsNullOrEmpty(imageData.Base64Data))
                {
                    <img src="data:@imageData.MimeType;base64,@imageData.Base64Data" style="max-width:100%;max-height:480px;object-fit:contain;" />
                }
                else
                {
                    <span style="color:#aaa;">No image selected or generated yet</span>
                }
            </div>
        </RadzenCard>
        <!-- Image List & Actions -->
        <RadzenCard Style="flex:1;min-width:260px;display:flex;flex-direction:column;max-height:400px;">
            <div style="flex:1 1 auto;overflow-y:auto;max-height:370px;">
                <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:6px;">
                    <div style="display:flex;align-items:center;gap:6px;">
                        <label style="font-size:0.9em;margin-right:4px;">Max keep:</label>
                        <RadzenNumeric TValue="int" @bind-Value="VM.MaxImagesToKeepNumeric" Min="0" Max="@(VM.GetMaxImagesConfig() > 0 ? VM.GetMaxImagesConfig() : int.MaxValue)" Change="@OnMaxImagesChanged" Style="width:90px;" />
                        <RadzenDropDown Data="@VM.Magnitudes" @bind-Value="VM.SelectedMagnitude" Change="@(args => { VM.UpdateMagnitudeFactor(); StateHasChanged(); })" Style="width:90px;" />
                    </div>
                </div>
                <RadzenListBox Data="@images" @bind-Value="selectedImageId" ValueProperty="Id" Style="height:360px;width:100%;" Change="@OnImageChanged">
                    <Template Context="img">
                        <div style="display:flex;align-items:center;gap:10px;font-size:0.92em;">
                            <span style="color:#888;">@img.Id</span>
                            <span style="color:var(--fg);">@img.FilePath</span>
                            <span style="color:#888;">[@img.Size.Width,@img.Size.Height]</span>
                            <span style="color:#888;">@VM.FormatSize(img) @VM.SelectedMagnitude</span>
                        </div>
                    </Template>
                </RadzenListBox>
            </div>
            <div class="d-flex gap-2 mt-2" style="flex-wrap:wrap;">
                <RadzenButton Icon="upload" Text="Upload" Click="@ShowFileDialog" />
                <RadzenButton Icon="download" Text="Download" Click="@DownloadImage" Disabled="@(!CanDownload)" />
                <RadzenDropDown Data="@formats" @bind-Value="selectedFormat" Style="width:80px;" />
                <RadzenNumeric TValue="int" @bind-Value="quality" Min="1" Max="100" Style="width:60px;" />
            </div>
            <div class="d-flex gap-2 mt-2" style="flex-wrap:wrap;">
                <RadzenButton Icon="delete" Text="Remove" ButtonStyle="ButtonStyle.Danger" Click="@RemoveImage" Disabled="@(!CanRemove)" />
                <RadzenButton Icon="clear" Text="Clear All" ButtonStyle="ButtonStyle.Secondary" Click="@ClearImages" />
            </div>
            <InputFile @ref="fileInput" id="fileInputHidden" style="display:none" OnChange="@OnInputFileChange" />
        </RadzenCard>
    </div>
</RadzenCard>

@code {
    private HomeViewModel VM = null!;
    private InputFile? fileInput;
    private bool isKernelInfoExpanded = false;

    protected override async Task OnInitializedAsync()
    {
        VM = new HomeViewModel(Api, Config, Notifications, JS, DialogService);
        await VM.InitializeAsync();
        if (VM.devices.Count > 0 && !string.IsNullOrWhiteSpace(Config.PreferredDevice))
        {
            var preferred = VM.devices.FirstOrDefault(d => d.DeviceName != null && d.DeviceName.ToLower().Contains(Config.PreferredDevice.ToLower()));
            VM.selectedDeviceIndex = preferred?.DeviceId ?? VM.devices[0].DeviceId;
        }
        else if (VM.devices.Count > 0)
        {
            VM.selectedDeviceIndex = VM.devices[0].DeviceId;
        }
        await VM.InitializeDevice();
        await VM.LoadOpenClStatus();
        await VM.UpdateImageData();
        StateHasChanged();
    }

    private List<OpenClDeviceInfo> devices { get => VM.devices; set => VM.devices = value; }
    private int selectedDeviceIndex { get => VM.selectedDeviceIndex; set => VM.selectedDeviceIndex = value; }
    private List<ImageObjInfo> images { get => VM.images; set => VM.images = value; }
    private Guid selectedImageId { get => VM.selectedImageId; set => VM.selectedImageId = value; }
    private ImageObjData? imageData { get => VM.imageData; set => VM.imageData = value; }
    private string selectedFormat { get => VM.selectedFormat; set => VM.selectedFormat = value; }
    private int quality { get => VM.quality; set => VM.quality = value; }
    private OpenClServiceInfo openClServiceInfo { get => VM.openClServiceInfo; set => VM.openClServiceInfo = value; }
    private List<string> formats { get => VM.formats; set => VM.formats = value; }
    private List<OpenClKernelInfo> kernelInfos { get => VM.kernelInfos; set => VM.kernelInfos = value; }
    private List<string> kernelNames { get => VM.kernelNames; set => VM.kernelNames = value; }
    private string selectedKernelName { get => VM.selectedKernelName; set => VM.selectedKernelName = value; }
    private OpenClKernelInfo? selectedKernelInfo { get => VM.selectedKernelInfo; set => VM.selectedKernelInfo = value; }
    private List<HomeViewModel.KernelArgViewModel> kernelArgViewModels { get => VM.kernelArgViewModels; set => VM.kernelArgViewModels = value; }
    private double lastKernelProcessingTimeMs { get => VM.images.FirstOrDefault(i => i.Id == VM.selectedImageId)?.LastProcessingTimeMs ?? 0; set { } }
    private string kernelInfoText { get => VM.kernelInfoText; set => VM.kernelInfoText = value; }
    private bool useExistingImage { get => VM.useExistingImage; set => VM.useExistingImage = value; }
    private string colorHex { get => VM.colorHex; set => VM.colorHex = value; }
    private string colorHexForNewImage { get => VM.colorHexForNewImage; set => VM.colorHexForNewImage = value; }
    private bool CanExecute => VM.CanExecute;
    private bool CanDownload => VM.selectedImageId != Guid.Empty;
    private bool CanRemove => VM.selectedImageId != Guid.Empty;

    private async Task OnDeviceChanged(object value) { await VM.OnDeviceChanged(value); StateHasChanged(); }
    private async Task InitializeDevice() { await VM.InitializeDevice(); StateHasChanged(); }
    private async Task ReloadDevices() { await VM.ReloadDevices(); StateHasChanged(); }
    private async Task ReleaseDevice() { await VM.ReleaseDevice(); StateHasChanged(); }
    private async Task DownloadImage()
    {
        if (selectedImageId == Guid.Empty)
        {
            Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Kein Bild ausgewählt", Duration = 2500 });
            return;
        }

        var file = await Api.DownloadImageAsync(selectedImageId, selectedFormat);
        if (file == null)
        {
            Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Download fehlgeschlagen", Duration = 2500 });
            return;
        }

        // Annahme: FileResponse hat eine Methode GetContentStream() oder ähnliches, um den Stream zu erhalten.
        // Falls die Methode anders heißt, bitte anpassen!
        using var ms = new MemoryStream();
        using var stream = file.Stream; // <--- Fix: Ersetze "file.Content" durch die korrekte Methode/Eigenschaft
        await stream.CopyToAsync(ms);
        var bytes = ms.ToArray();
        var base64 = Convert.ToBase64String(bytes);
        var mime = "application/octet-stream";
        var filename = $"image_{selectedImageId}.{selectedFormat}";

        await JS.InvokeVoidAsync(
            "eval",
            $"(function(){{var a=document.createElement('a');a.href='data:{mime};base64,{base64}';a.download='{filename}';document.body.appendChild(a);a.click();document.body.removeChild(a);}})();"
        );

        Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Download gestartet", Duration = 2000 });
    }
    private async Task RemoveImage() { await VM.RemoveImage(selectedImageId); await VM.LoadImages(); await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric); Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Image removed", Duration = 2000 }); }
    private async Task ClearImages() { await VM.ClearImages(); await VM.LoadImages(); await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric); Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "All images removed", Duration = 2000 }); }
    private async Task ExecuteKernel()
    {
        var argNames = VM.selectedKernelInfo?.ArgumentNames?.ToArray() ?? Array.Empty<string>();
        var argTypes = VM.selectedKernelInfo?.ArgumentType?.ToArray() ?? Array.Empty<string>();
        string[] argVals = new string[argTypes.Length];

        ImageObjInfo? selectedInfo = null;
        if (VM.useExistingImage && VM.selectedImageId != Guid.Empty)
            selectedInfo = VM.images.FirstOrDefault(i => i.Id == VM.selectedImageId);

        for (int i = 0; i < argNames.Length; i++)
        {
            var name = argNames[i];
            var vmArg = VM.kernelArgViewModels.FirstOrDefault(k => k.Index == i || k.Name == name);
            if (vmArg == null) { argVals[i] = "0"; continue; }
            if (vmArg.IsPointer) { argVals[i] = "0"; continue; }
            var lname = name.ToLower();
            if (VM.useExistingImage && selectedInfo != null && (lname.Contains("width") || lname.Contains("height")))
            {
                if (lname.Contains("width")) argVals[i] = selectedInfo.Size.Width.ToString();
                else if (lname.Contains("height")) argVals[i] = selectedInfo.Size.Height.ToString();
                else argVals[i] = vmArg.Value.ToString(CultureInfo.InvariantCulture);
            }
            else
            {
                argVals[i] = vmArg.Value.ToString(CultureInfo.InvariantCulture);
            }
        }

        var sw = System.Diagnostics.Stopwatch.StartNew();
        if (VM.useExistingImage)
        {
            if (VM.selectedImageId == Guid.Empty)
            {
                Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No image selected", Duration = 3000 });
                return;
            }
            var result = await VM.ExecuteGenericImageKernel(VM.selectedImageId, VM.selectedKernelName, argNames, argVals);
            if (result == null)
            {
                Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Kernel execution failed", Duration = 3000 });
                return;
            }
            if (result.Id != Guid.Empty) VM.selectedImageId = result.Id;
        }
        else
        {
            int width = 0, height = 0;
            foreach (var a in VM.kernelArgViewModels)
            {
                if (VM.IsWidthOrHeight(a))
                {
                    var lname = a.Name.ToLower();
                    if (lname.Contains("width")) width = (int)a.Value;
                    if (lname.Contains("height")) height = (int)a.Value;
                }
            }
            if (width <= 0 || height <= 0)
            {
                Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Width/Height missing or invalid", Duration = 3000 });
                return;
            }
            var result = await VM.ExecuteCreateImageAsync(width, height, VM.selectedKernelName, VM.colorHexForNewImage, argNames, argVals);
            if (result != null)
            {
                VM.selectedImageId = result.Id;
            }
            else
            {
                Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Image creation failed", Duration = 3000 });
                return;
            }
        }

        sw.Stop();
        var selectedImg = VM.images.FirstOrDefault(i => i.Id == VM.selectedImageId);
        if (selectedImg != null && selectedImg.LastProcessingTimeMs <= 0)
        {
            selectedImg.LastProcessingTimeMs = sw.Elapsed.TotalMilliseconds;
        }
        await VM.LoadImages();
        await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric);
        await VM.UpdateImageData();

        Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"Kernel executed in {VM.lastKernelProcessingTimeMs:F1} ms", Duration = 2000 });
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e) { await VM.OnInputFileChange(e); await VM.LoadImages(); await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric); }
    private async Task OnMaxImagesChanged() { await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric); await VM.LoadImages(); StateHasChanged(); Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"Max images set to {VM.MaxImagesToKeepNumeric}", Duration = 2000 }); }
    private async Task OnKernelChanged(object value) { await VM.OnKernelChanged(value); StateHasChanged(); }
    private bool IsWidthOrHeight(HomeViewModel.KernelArgViewModel arg) => VM.IsWidthOrHeight(arg);
    private bool IsColorGroupRepresentative(HomeViewModel.KernelArgViewModel arg) => VM.IsColorGroupRepresentative(arg);
    private string GetRgbLabel(string hex) => VM.GetRgbLabel(hex);
    private void OnBaseColorChanged(string? value) { VM.OnBaseColorChanged(value); StateHasChanged(); }
    private void OnDimensionNumericChanged(HomeViewModel.KernelArgViewModel arg, decimal v) { arg.Value = v; StateHasChanged(); }
    private async Task OnArgChanged(HomeViewModel.KernelArgViewModel arg, decimal v)
    {
        arg.Value = v;
        StateHasChanged();
        if (VM.redrawAfterValueChange && CanExecute)
        {
            await ExecuteKernel();
        }
    }
    private async Task OnImageChanged(object value) { await VM.OnImageChanged(value); await VM.UpdateImageData(); StateHasChanged(); }
    private void ShowFileDialog() => JS.InvokeVoidAsync("eval", "document.getElementById('fileInputHidden').click()");
    private void OnUseExistingImageChanged(bool value) { VM.useExistingImage = value; StateHasChanged(); }
}
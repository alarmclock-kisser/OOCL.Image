@page "/"
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using OOCL.Image.Client
@using OOCL.Image.Shared
@using Radzen.Blazor
@using Radzen
@using Microsoft.JSInterop
@using System.Globalization
@inject ApiClient Api
@inject WebAppConfig Config
@inject NotificationService Notifications
@inject IJSRuntime JS
@inject DialogService DialogService

<PageTitle>OOCL.work: Home</PageTitle>

<link rel="stylesheet" href="/css/site.css" />
<link rel="icon" type="image/x-icon" href="favicon.ico" />

<RadzenCard Style="max-width:1200px;margin:auto;margin-top:2rem;">

    <!-- OpenCL Device Section (collapsible) -->
    <div class="opencl-device-panel themed-panel">
        <!-- Header -->
        <div class="panel-header">
            <b class="panel-title">OpenCL Device</b>
            <span class="panel-sub">@GetDeviceSummary()</span>
            <span class="spacer"></span>
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Size="ButtonSize.Small"
                          Icon="@(isDeviceSectionExpanded ? "remove" : "add")"
                          Style="min-width:30px;width:30px;padding:0;"
                          Click="@ToggleDeviceSection" />
        </div>

        <!-- Body (only if expanded) -->
        @if (isDeviceSectionExpanded)
        {
            <div class="panel-body">
                <div style="display:flex;flex-wrap:wrap;gap:16px;align-items:stretch;">
                    <!-- Device Selection -->
                    <div style="flex:1 1 260px;min-width:250px;border:1px solid var(--rz-border-color,#333);border-radius:4px;padding:10px;">
                        <h4 style="margin:0 0 6px;font-size:0.95rem;">Device selection</h4>
                        <RadzenDropDown TValue="int"
                                        Data="@devices"
                                        @bind-Value="selectedDeviceIndex"
                                        TextProperty="DeviceName"
                                        ValueProperty="DeviceId"
                                        Style="width:100%;"
                                        Change="@OnDeviceChanged"
                                        Placeholder="Select OpenCL-Device..." >
                            <Template Context="device">
                                @device.DeviceName (@device.DeviceType)
                            </Template>
                        </RadzenDropDown>
                    </div>

                    <!-- Status Info -->
                    <div style="flex:1 1 260px;min-width:250px;border:1px solid var(--rz-border-color,#333);border-radius:4px;padding:10px;">
                        <h4 style="margin:0 0 6px;font-size:0.95rem;">Status</h4>
                        <div style="font-size:0.78rem;line-height:1.35;">
                            <b>Device:</b> @(openClServiceInfo.DeviceName + " [" + openClServiceInfo.DeviceId + "]")<br />
                            <b>Platform:</b> @openClServiceInfo.PlatformName <br />
                            <b>Initialized:</b> @(openClServiceInfo.Initialized ? "Yes" : "No") <br />
                            <b>Vendor:</b> @(openClServiceInfo.CurrentDevice?.Vendor) <br />
                            <b>Driver:</b> @(openClServiceInfo.CurrentDevice?.DriverVersion) <br />
                            <b>OpenCL:</b> @(openClServiceInfo.CurrentDevice?.Version) <br />
                        </div>
                    </div>

                    <!-- Actions -->
                    <div style="flex:1 1 260px;min-width:250px;border:1px solid var(--rz-border-color,#333);border-radius:4px;padding:10px;display:flex;flex-direction:column;gap:8px;">
                        <h4 style="margin:0 0 4px;font-size:0.95rem;">Actions</h4>
                        <div style="display:flex;flex-wrap:wrap;gap:6px;">
                            <RadzenButton Icon="play_arrow" Text="Initialize" Click="@InitializeDevice" />
                            <RadzenButton Icon="close" Text="Dispose" ButtonStyle="ButtonStyle.Danger" Click="@ReleaseDevice" />
                            <RadzenButton Icon="refresh" Text="Refresh" ButtonStyle="ButtonStyle.Light" Click="@ReloadDevices" />
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Generic Image Kernel Execution Card -->
    <RadzenCard Style="margin-bottom:1.5rem;">
        <h4>Generic Image Kernel Execution</h4>
        <div class="d-flex flex-row align-items-center gap-3 mb-2">
            <RadzenDropDown TValue="string" Data="@kernelNames" @bind-Value="selectedKernelName" Style="min-width:220px;" Change="@OnKernelChanged" Placeholder="Select kernel..." />
        </div>
        @if (VM.selectedKernelInfo?.NeedsImage == true)
        {
            <div class="d-flex flex-row align-items-center gap-2 mb-2">
                <RadzenCheckBox @bind-Value="useExistingImage" TValue="bool" Change="@OnUseExistingImageChanged" />
                <span>@(useExistingImage ? "on existing image" : "on new blank")</span>
            </div>
        }

        @if (VM.selectedKernelInfo?.ColorInputArgNames != null && VM.selectedKernelInfo.ColorInputArgNames.Length == 3)
        {
            <div class="d-flex flex-column gap-1 mb-2">
                <div class="d-flex align-items-center gap-2">
                    <label style="font-size:0.95em;">Color:</label>
                    <label style="font-size:0.95em;">@GetRgbLabel(colorHexForNewImage)</label>
                </div>
                <div class="d-flex flex-row align-items-center gap-2">
                    <RadzenColorPicker Value="@colorHexForNewImage" ValueChanged="@OnBaseColorChanged" Style="min-width:120px;" ShowRGBA="true" />
                </div>
            </div>
        }

        @if (kernelArgViewModels.Any(a => !a.IsPointer && IsColorGroupRepresentative(a) || !a.IsPointer && !a.IsColor))
        {
            var numericArgs = kernelArgViewModels.Where(a => !a.IsPointer && !a.IsColor && !IsColorGroupRepresentative(a)).OrderBy(a => a.Index).ToList();
            int count = numericArgs.Count;
            int columns = count <= 2 ? count : count <= 4 ? 2 : count <= 9 ? 3 : 4;
            <div style="display:grid;grid-template-columns:repeat(@columns,1fr);gap:12px 16px;margin-bottom:12px;">
                @foreach (var arg in numericArgs)
                {
                    <div style="display:flex;flex-direction:column;align-items:flex-start;">
                        <label style="font-size:0.95em;">@arg.Name<br /><span style="font-size:0.85em;color:gray;">(@arg.Type)</span></label>
                        <RadzenNumeric TValue="decimal"
                                       style="min-width:90px;"
                                       @bind-Value="arg.Value"
                                       Step="@arg.StepString"
                                       Min="@arg.Min" Max="@arg.Max"
                                       Change="@((decimal v) => OnArgChanged(arg, v))"
                                       Disabled="@(useExistingImage && IsWidthOrHeight(arg))" />
                    </div>
                }
            </div>
        }

        <div class="d-flex flex-row align-items-center gap-2 mb-2">
            <RadzenCheckBox @bind-Value="VM.redrawAfterValueChange" TValue="bool" />
            <label style="font-size:0.9em;margin:0;">Redraw on value change</label>
        </div>
        <div class="d-flex flex-row align-items-center gap-2 mb-2">
            <RadzenCheckBox @bind-Value="VM.RandomizeRgb" TValue="bool" Change="@(v => { if (v) { VM.RandomizeColor(); StateHasChanged(); } })" />
            <label style="font-size:0.9em;margin:0;">Randomize RGB values</label>
        </div>

        <!-- Kernel Info collapsible -->
        <div class="kernel-info-panel themed-panel small-gap">
            <div class="panel-header">
                <b class="panel-title">Kernel Arguments Info</b>
                <span class="spacer"></span>
                <RadzenButton ButtonStyle="ButtonStyle.Light"
                              Size="ButtonSize.Small"
                              Icon="@(isKernelInfoExpanded ? "remove" : "add")"
                              Style="min-width:30px;width:30px;padding:0;"
                              Click="ToggleKernelInfo" />
            </div>
            <div class="kernel-info-body" style="@(isKernelInfoExpanded ? "padding:6px 8px 10px;transition:all .18s ease;" : "display:none;")">
                <RadzenTextArea @bind-Value="kernelInfoText"
                                Rows="12"
                                ReadOnly="true"
                                Style="width:100%;height:320px;font-family:monospace;font-size:0.75rem;white-space:pre;" />
            </div>
        </div>

        <RadzenButton Icon="play_arrow" Text="Execute" Click="@ExecuteKernel" Disabled="@(!CanExecute)" Style="width:100%;margin-top:1rem;margin-bottom:0.5rem;" />
        <div style="margin-top:0.5rem;font-size:0.95em;">
            <b>Last Processing-Time:</b> @lastKernelProcessingTimeMs ms
        </div>
    </RadzenCard>

    <!-- Image Row -->
    <div class="d-flex flex-row gap-3 align-items-stretch">
        <RadzenCard Style="flex:2;min-width:320px;display:flex;align-items:center;justify-content:center;position:relative;min-height:320px;">
            <div style="resize:both;overflow:auto;min-width:200px;min-height:200px;max-width:100%;max-height:500px;border:1px solid #ccc;background:#222;display:flex;align-items:center;justify-content:center;">
                @if (imageData != null && !string.IsNullOrEmpty(imageData.Base64Data))
                {
                    <img src="data:@imageData.MimeType;base64,@imageData.Base64Data" style="max-width:100%;max-height:480px;object-fit:contain;" />
                }
                else
                {
                    <span style="color:#aaa;">No image selected or generated yet</span>
                }
            </div>
        </RadzenCard>
        <RadzenCard Style="flex:1;min-width:260px;display:flex;flex-direction:column;">
            <!-- Kopf mit Einstellungen (NICHT scrollen) -->
            <div style="flex:0 0 auto;">
                <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:6px;">
                    <div style="display:flex;align-items:center;gap:6px;">
                        <label style="font-size:0.9em;margin-right:4px;">Max Keep: </label>
                        <RadzenNumeric TValue="int"
                                       @bind-Value="VM.MaxImagesToKeepNumeric"
                                       Min="@(VM.GetMaxImagesConfig() > 0 ? 1 : 0)"
                                       Max="@(VM.GetMaxImagesConfig() > 0 ? VM.GetMaxImagesConfig() : int.MaxValue)"
                                       Change="@OnMaxImagesChanged"
                                       Style="width:90px;" />
                        <label style="font-size:0.9em;margin-right:4px;">Unit: </label>
                        <RadzenDropDown Data="@VM.Magnitudes" @bind-Value="VM.SelectedMagnitude" Change="@(args => { VM.UpdateMagnitudeFactor(); StateHasChanged(); })" Style="width:90px;" />
                    </div>
                </div>
            </div>

            <!-- Nur die Liste soll scrollen -->
            <div style="flex:0 0 auto;min-height:100px;max-height:220px;overflow-y:auto;border:1px solid var(--rz-border-color,#333);border-radius:4px;margin-bottom:8px;">
                <RadzenListBox Data="@images"
                               @bind-Value="selectedImageId"
                               ValueProperty="Id"
                               Style="width:100%;height:auto;min-height:100px;"
                               Change="@OnImageChanged">
                    <Template Context="img">
                        @{
                            // Anzeigetext: Name oder Pfad (falls Name leer)
                            var displayName = !string.IsNullOrWhiteSpace(img.Name) ? img.Name : string.IsNullOrEmpty(img.Path) ? "unknown_" + VM.images.IndexOf(img) : img.Path;
                        }
                        <div class="image-list-entry @(selectedImageId == img.Id ? "selected" : string.Empty)"
                             title="@displayName">
                            <span class="img-id">@((MarkupString) VM.FormatGuidForDisplay(img.Id))</span>

                            <span class="img-name">@displayName</span>

                            <span class="img-meta">
                                <span class="img-dims">[@img.Size.Width,@img.Size.Height]</span>
                                <span class="img-bytes">@VM.FormatSize(img) @VM.SelectedMagnitude</span>
                            </span>
                        </div>
                    </Template>
                </RadzenListBox>
            </div>

            <!-- Buttons bleiben unterhalb der (ggf. gescrollten) Liste -->
            <div class="d-flex gap-2 mt-2" style="flex-wrap:wrap;">
                <RadzenButton Icon="upload" Text="Upload" Click="@ShowFileDialog" />
                <RadzenButton Icon="download" Text="Download" Click="@DownloadImage" Disabled="@(!CanDownload)" />
                <RadzenDropDown Data="@formats" @bind-Value="selectedFormat" Style="width:80px;" />
            </div>
            <div class="d-flex gap-2 mt-2" style="flex-wrap:wrap;">
                <RadzenButton Icon="delete" Text="Remove" ButtonStyle="ButtonStyle.Danger" Click="@RemoveImage" Disabled="@(!CanRemove)" />
                <RadzenButton Icon="clear" Text="Clear All" ButtonStyle="ButtonStyle.Secondary" Click="@ClearImages" />
            </div>
            <div>
                <!-- Download as Gif button with checkbox doLoop, numericUD frameRate, numericUD rescaleFactor -->
                <RadzenButton Icon="gif" Text="Download GIF" Click="@DownloadGif" Disabled="@(!CanDownload)" Style="margin-top:8px;" />
                <label style="font-size:0.9em;margin-right:4px;">FrameRate:</label>
                <RadzenNumeric TValue="int" @bind-Value="VM.GifFrameRate" Min=1 Max=144 Style="width:80px;" />
                <label style="font-size:0.9em;margin:0 8px 0 16px;">Rescale:</label>
                <RadzenNumeric TValue="double" @bind-Value="VM.GifRescaleFactor" Min="@(GifRescaleMin)" Max="@(GifRescaleMax)" Step="0.01" Style="width:80px;" />
                <label style="font-size:0.9em;margin:0 8px 0 16px;">Loop:</label>
                <RadzenCheckBox @bind-Value="VM.GifDoLoop" TValue="bool" Style="margin-top:8px;" />
            </div>
            <InputFile @ref="fileInput" id="fileInputHidden" style="display:none" OnChange="@OnInputFileChange" />
        </RadzenCard>
    </div>

    <!-- App & Service info -->
    <div class="opencl-device-panel themed-panel">
        <!-- Header -->
        <div class="panel-header">
            <b class="panel-title">Service and App Configuration</b>
            <span class="panel-sub">@GetConfigSummary()</span>
            <span class="spacer"></span>
            <RadzenButton ButtonStyle="ButtonStyle.Light"
                          Size="ButtonSize.Small"
                          Icon="@(isDeviceSectionExpanded ? "remove" : "add")"
                          Style="min-width:30px;width:30px;padding:0;"
                          Click="@ToggleConfigInfoSection" />
        </div>

        <!-- Body (only if expanded) -->
        @if (isConfigInfoSectionExpanded)
        {
            <!-- TextBox with all values from DI WebAppConfig left and right with dividing view slider to see more of each side -->
            <div class="panel-body">
                <RadzenTextArea @bind-Value="VM.WebAppConfigText"
                                Rows="12"
                                ReadOnly="true"
                            Style="width:100%;height:320px;font-family:monospace;font-size:0.75rem;white-space:pre;" />
            </div>
            <!-- TextBox with all values from DI WebApiConfig left and right with dividing view slider to see more of each side -->
            <div class="panel-body">
                <RadzenTextArea @bind-Value="VM.WebApiConfigText"
                                Rows="12"
                                ReadOnly="true"
                                Style="width:100%;height:320px;font-family:monospace;font-size:0.75rem;white-space:pre;" />
            </div>
        }
    </div>
</RadzenCard>

@code {
    // NEU: Übernahme gecatcher Werte aus MainLayout
    [CascadingParameter] public OpenClServiceInfo? LayoutOpenClInfo { get; set; }
    [CascadingParameter] public List<OpenClKernelInfo>? LayoutKernelInfos { get; set; }

    private HomeViewModel VM = null!;
    private InputFile? fileInput;

    private bool isKernelInfoExpanded = false;
    private bool isDeviceSectionExpanded = false;
    private bool isConfigInfoSectionExpanded = false;

    private decimal GifRescaleMin => 0.1m;
    private decimal GifRescaleMax => 5.0m;
    private decimal GifRescaleStep => 0.1m;

    protected override async Task OnInitializedAsync()
    {
        VM = new HomeViewModel(Api, Config, Notifications, JS, DialogService);

        // Falls Meta aus Layout vorhanden → injizieren (verhindert doppelte Calls)
        if (LayoutKernelInfos != null && LayoutKernelInfos.Count > 0)
        {
            VM.InjectPreloadedMeta(LayoutOpenClInfo, LayoutKernelInfos);
        }

        await VM.InitializeAsync(); // Lädt nur noch das, was fehlt

        // Device-Default Wahl wie gehabt
        if (VM.devices.Count > 0 && !string.IsNullOrWhiteSpace(Config.PreferredDevice))
        {
            var preferred = VM.devices.FirstOrDefault(d => d.DeviceName != null && d.DeviceName.ToLower().Contains(Config.PreferredDevice.ToLower()));
            VM.selectedDeviceIndex = preferred?.DeviceId ?? VM.devices[0].DeviceId;
        }
        else if (VM.devices.Count > 0)
        {
            VM.selectedDeviceIndex = VM.devices[0].DeviceId;
        }

        // Nur initialisieren, wenn noch nicht erfolgt
        if (!(VM.openClServiceInfo?.Initialized ?? false))
        {
            await VM.InitializeDevice();
            await VM.LoadOpenClStatus();
        }

        isDeviceSectionExpanded = !(VM.openClServiceInfo?.Initialized ?? false);

        await VM.UpdateImageData();
        StateHasChanged();
    }

    // --- bestehende Mappings / Properties ---
    private List<OpenClDeviceInfo> devices { get => VM.devices; set => VM.devices = value; }
    private int selectedDeviceIndex { get => VM.selectedDeviceIndex; set => VM.selectedDeviceIndex = value; }
    private List<ImageObjInfo> images { get => VM.images; set => VM.images = value; }
    private Guid selectedImageId { get => VM.selectedImageId; set => VM.selectedImageId = value; }
    private ImageObjData? imageData { get => VM.imageData; set => VM.imageData = value; }
    private string selectedFormat { get => VM.selectedFormat; set => VM.selectedFormat = value; }
    private int quality { get => VM.quality; set => VM.quality = value; }
    private OpenClServiceInfo openClServiceInfo { get => VM.openClServiceInfo; set => VM.openClServiceInfo = value; }
    private List<string> formats { get => VM.formats; set => VM.formats = value; }
    private List<OpenClKernelInfo> kernelInfos { get => VM.kernelInfos; set => VM.kernelInfos = value; }
    private List<string> kernelNames { get => VM.kernelNames; set => VM.kernelNames = value; }
    private string selectedKernelName
    {
        get => VM.selectedKernelName;
        set
        {
            if (VM.selectedKernelName != value)
            {
                VM.OnKernelChanged(value);
                StateHasChanged();
            }
        }
    }
    private OpenClKernelInfo? selectedKernelInfo { get => VM.selectedKernelInfo; set => VM.selectedKernelInfo = value; }
    private List<HomeViewModel.KernelArgViewModel> kernelArgViewModels { get => VM.kernelArgViewModels; set => VM.kernelArgViewModels = value; }
    private double lastKernelProcessingTimeMs { get => VM.images.FirstOrDefault(i => i.Id == VM.selectedImageId)?.LastProcessingTimeMs ?? 0; set { } }
    private string kernelInfoText { get => VM.kernelInfoText; set => VM.kernelInfoText = value; }
    private bool useExistingImage { get => VM.useExistingImage; set => VM.useExistingImage = value; }
    private string colorHex { get => VM.colorHex; set => VM.colorHex = value; }
    private string colorHexForNewImage { get => VM.colorHexForNewImage; set => VM.colorHexForNewImage = value; }
    private bool CanExecute => VM.CanExecute;
    private bool CanDownload => VM.selectedImageId != Guid.Empty;
    private bool CanRemove => VM.selectedImageId != Guid.Empty;

    // --- Methoden (unverändert außer Position) ---
    private void ToggleConfigInfoSection()
    {
        isConfigInfoSectionExpanded = !isConfigInfoSectionExpanded;
    }
    private string GetConfigSummary()
    {
        if (Config == null)
            return "Keine Konfiguration geladen";
        return $"App: {Config.ApplicationName ?? "?"}, API: {Config.ApiBaseUrl ?? "?"}";
    }

    private void ToggleDeviceSection()
    {
        isDeviceSectionExpanded = !isDeviceSectionExpanded;
    }
    private async Task OnDeviceChanged(object value) { await VM.OnDeviceChanged(value); await VM.LoadOpenClStatus(); StateHasChanged(); }
    private async Task InitializeDevice() { await VM.InitializeDevice(); await VM.LoadOpenClStatus(); StateHasChanged(); }
    private async Task ReloadDevices() { await VM.ReloadDevices(); await VM.LoadOpenClStatus(); StateHasChanged(); }
    private async Task ReleaseDevice() { await VM.ReleaseDevice(); await VM.LoadOpenClStatus(); StateHasChanged(); }
    private void ToggleKernelInfo()
    {
        isKernelInfoExpanded = !isKernelInfoExpanded;
    }

    private async Task DownloadImage()
    {
        if (selectedImageId == Guid.Empty)
        {
            Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Kein Bild ausgewählt", Duration = 2500 });
            return;
        }
        if (!await Api.IsServersidedDataAsync())
        {
            await VM.DownloadImage(selectedImageId, selectedFormat);
            return;
        }

        var file = await Api.DownloadImageAsync(selectedImageId, selectedFormat);
        if (file == null)
        {
            Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Download fehlgeschlagen", Duration = 2500 });
            return;
        }
        using var ms = new MemoryStream();
        using var stream = file.Stream;
        await stream.CopyToAsync(ms);
        var bytes = ms.ToArray();
        var base64 = Convert.ToBase64String(bytes);
        var mime = "application/octet-stream";
        var filename = $"image_{selectedImageId}.{selectedFormat}";
        await JS.InvokeVoidAsync("eval",
            $"(function(){{var a=document.createElement('a');a.href='data:{mime};base64,{base64}';a.download='{filename}';document.body.appendChild(a);a.click();document.body.removeChild(a);}})();");
        Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Download gestartet", Duration = 2000 });
    }
    private async Task DownloadGif()
    {
        await VM.DownloadCreateGif();
    }


    private async Task RemoveImage() { await VM.RemoveImage(selectedImageId); await VM.LoadImages(); await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric); Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Image removed", Duration = 2000 }); }
    private async Task ClearImages() { await VM.ClearImages(); await VM.LoadImages(); await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric); Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "All images removed", Duration = 2000 }); }

    private async Task ExecuteKernel()
    {
        var argNames = VM.selectedKernelInfo?.ArgumentNames?.ToArray() ?? Array.Empty<string>();
        var argTypes = VM.selectedKernelInfo?.ArgumentType?.ToArray() ?? Array.Empty<string>();
        string[] argVals = new string[argTypes.Length];

        ImageObjInfo? selectedInfo = null;
        if (VM.useExistingImage && VM.selectedImageId != Guid.Empty)
            selectedInfo = VM.images.FirstOrDefault(i => i.Id == VM.selectedImageId);

        for (int i = 0; i < argNames.Length; i++)
        {
            var name = argNames[i];
            var vmArg = VM.kernelArgViewModels.FirstOrDefault(k => k.Index == i || k.Name == name);
            if (vmArg == null || vmArg.IsPointer) { argVals[i] = "0"; continue; }
            var lname = name.ToLower();
            if (VM.useExistingImage && selectedInfo != null && (lname.Contains("width") || lname.Contains("height")))
            {
                if (lname.Contains("width")) argVals[i] = selectedInfo.Size.Width.ToString();
                else if (lname.Contains("height")) argVals[i] = selectedInfo.Size.Height.ToString();
                else argVals[i] = vmArg.Value.ToString(CultureInfo.InvariantCulture);
            }
            else
            {
                argVals[i] = vmArg.Value.ToString(CultureInfo.InvariantCulture);
            }
        }

        var sw = System.Diagnostics.Stopwatch.StartNew();
        if (VM.useExistingImage)
        {
            if (VM.selectedImageId == Guid.Empty)
            {
                Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "No image selected", Duration = 3000 });
                return;
            }
            var result = await VM.ExecuteGenericImageKernel(VM.selectedImageId, VM.selectedKernelName, argNames, argVals);
            if (result == null)
            {
                Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Kernel execution failed", Duration = 3000 });
                return;
            }
            if (result.Id != Guid.Empty)
            {
                VM.selectedImageId = result.Id;
                VM.ClientImageCollection.Add(result);
            }
        }
        else
        {
            int width = 480, height = 360;
            foreach (var a in VM.kernelArgViewModels)
            {
                if (VM.IsWidthOrHeight(a))
                {
                    var lname = a.Name.ToLower();
                    if (lname.Contains("width")) width = (int)a.Value;
                    if (lname.Contains("height")) height = (int)a.Value;
                }
            }
            if (width <= 0 || height <= 0)
            {
                Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Width/Height missing or invalid", Duration = 3000 });
                return;
            }
            var result = await VM.ExecuteCreateImageAsync(width, height, VM.selectedKernelName, VM.colorHexForNewImage, argNames, argVals);
            if (result == null)
            {
                Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Image creation failed", Duration = 3000 });
                return;
            }
            if (result.Id != Guid.Empty)

            {
                VM.selectedImageId = result.Id;
                VM.ClientImageCollection.Add(result);
            }
        }

        sw.Stop();
        var selectedImg = VM.images.FirstOrDefault(i => i.Id == VM.selectedImageId);
        if (selectedImg != null && selectedImg.LastProcessingTimeMs <= 0)
            selectedImg.LastProcessingTimeMs = sw.Elapsed.TotalMilliseconds;

        await VM.LoadImages();
        await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric);
        await VM.UpdateImageData();

        Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"Kernel executed in {VM.lastKernelProcessingTimeMs:F1} ms", Duration = 2000 });
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        await VM.OnInputFileChange(e);
        await VM.LoadImages();
        await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric);
        await VM.UpdateImageData();
    }

    private async Task OnMaxImagesChanged() { await VM.SetMaxImagesAsync(VM.MaxImagesToKeepNumeric); await VM.LoadImages(); StateHasChanged(); Notifications.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"Max images set to {VM.MaxImagesToKeepNumeric}", Duration = 2000 }); }
    private bool IsWidthOrHeight(HomeViewModel.KernelArgViewModel arg) => VM.IsWidthOrHeight(arg);
    private bool IsColorGroupRepresentative(HomeViewModel.KernelArgViewModel arg) => VM.IsColorGroupRepresentative(arg);
    private string GetRgbLabel(string hex) => VM.GetRgbLabel(hex);
    private void OnBaseColorChanged(string? value) { VM.OnBaseColorChanged(value); StateHasChanged(); }
    private async Task OnArgChanged(HomeViewModel.KernelArgViewModel arg, decimal v)
    {
        decimal previous = arg.Value;
        if (!VM.useExistingImage && IsWidthOrHeight(arg))
        {
            v = VM.SnapDimensionNearest(arg.Name, v);

            if (v < 1) v = 1;
        }
        arg.Value = v;
        StateHasChanged();
        if (VM.redrawAfterValueChange && CanExecute)
            await ExecuteKernel();
    }

    private void OnKernelChanged(object value)
    {
        VM.OnKernelChanged(value);
        StateHasChanged(); // <-- Der magische Aufruf
    }

    // Anpassung: OnUseExistingImageChanged ruft neue VM-Methode auf
    private void OnUseExistingImageChanged(bool value)
    {
        VM.useExistingImage = value;
        var info = VM.images.FirstOrDefault(i => i.Id == VM.selectedImageId);
        VM.OnUseExistingModeChanged(info);
        StateHasChanged();
    }
    private async Task OnImageChanged(object value) { await VM.OnImageChanged(value); await VM.UpdateImageData(); StateHasChanged(); }
    private void ShowFileDialog() => JS.InvokeVoidAsync("eval", "document.getElementById('fileInputHidden').click()");

    // Hilfsmethode für die Anzeige der Device-Zusammenfassung
    private string GetDeviceSummary()
    {
        if (openClServiceInfo == null || openClServiceInfo.CurrentDevice == null)
            return "Kein Gerät ausgewählt";
        return $"{openClServiceInfo.DeviceName} ({openClServiceInfo.CurrentDevice.DeviceType})";
    }
}